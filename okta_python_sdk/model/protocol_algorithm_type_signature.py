# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class ProtocolAlgorithmTypeSignature(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            algorithm = schemas.StrSchema
            
            
            class scope(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RESPONSE": "RESPONSE",
                        "TOKEN": "TOKEN",
                        "ANY": "ANY",
                        "REQUEST": "REQUEST",
                        "NONE": "NONE",
                    }
                
                @schemas.classproperty
                def RESPONSE(cls):
                    return cls("RESPONSE")
                
                @schemas.classproperty
                def TOKEN(cls):
                    return cls("TOKEN")
                
                @schemas.classproperty
                def ANY(cls):
                    return cls("ANY")
                
                @schemas.classproperty
                def REQUEST(cls):
                    return cls("REQUEST")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
            __annotations__ = {
                "algorithm": algorithm,
                "scope": scope,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["algorithm"]) -> MetaOapg.properties.algorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["algorithm", "scope", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["algorithm"]) -> typing.Union[MetaOapg.properties.algorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["algorithm", "scope", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        algorithm: typing.Union[MetaOapg.properties.algorithm, str, schemas.Unset] = schemas.unset,
        scope: typing.Union[MetaOapg.properties.scope, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProtocolAlgorithmTypeSignature':
        return super().__new__(
            cls,
            *args,
            algorithm=algorithm,
            scope=scope,
            _configuration=_configuration,
            **kwargs,
        )
