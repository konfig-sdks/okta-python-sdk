# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class EventHookChannelConfig(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def authScheme() -> typing.Type['EventHookChannelConfigAuthScheme']:
                return EventHookChannelConfigAuthScheme
            
            
            class headers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventHookChannelConfigHeader']:
                        return EventHookChannelConfigHeader
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventHookChannelConfigHeader'], typing.List['EventHookChannelConfigHeader']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'headers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventHookChannelConfigHeader':
                    return super().__getitem__(i)
            uri = schemas.StrSchema
            __annotations__ = {
                "authScheme": authScheme,
                "headers": headers,
                "uri": uri,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authScheme"]) -> 'EventHookChannelConfigAuthScheme': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authScheme", "headers", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authScheme"]) -> typing.Union['EventHookChannelConfigAuthScheme', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> typing.Union[MetaOapg.properties.headers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authScheme", "headers", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        authScheme: typing.Union['EventHookChannelConfigAuthScheme', schemas.Unset] = schemas.unset,
        headers: typing.Union[MetaOapg.properties.headers, list, tuple, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventHookChannelConfig':
        return super().__new__(
            cls,
            *args,
            authScheme=authScheme,
            headers=headers,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.event_hook_channel_config_auth_scheme import EventHookChannelConfigAuthScheme
from okta_python_sdk.model.event_hook_channel_config_header import EventHookChannelConfigHeader
