# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class SocialAuthToken(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            expiresAt = schemas.DateTimeSchema
            id = schemas.StrSchema
        
            @staticmethod
            def scopes() -> typing.Type['SocialAuthTokenScopes']:
                return SocialAuthTokenScopes
            token = schemas.StrSchema
            tokenAuthScheme = schemas.StrSchema
            tokenType = schemas.StrSchema
            __annotations__ = {
                "expiresAt": expiresAt,
                "id": id,
                "scopes": scopes,
                "token": token,
                "tokenAuthScheme": tokenAuthScheme,
                "tokenType": tokenType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'SocialAuthTokenScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenAuthScheme"]) -> MetaOapg.properties.tokenAuthScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenType"]) -> MetaOapg.properties.tokenType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expiresAt", "id", "scopes", "token", "tokenAuthScheme", "tokenType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['SocialAuthTokenScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenAuthScheme"]) -> typing.Union[MetaOapg.properties.tokenAuthScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenType"]) -> typing.Union[MetaOapg.properties.tokenType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expiresAt", "id", "scopes", "token", "tokenAuthScheme", "tokenType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        scopes: typing.Union['SocialAuthTokenScopes', schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        tokenAuthScheme: typing.Union[MetaOapg.properties.tokenAuthScheme, str, schemas.Unset] = schemas.unset,
        tokenType: typing.Union[MetaOapg.properties.tokenType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SocialAuthToken':
        return super().__new__(
            cls,
            *args,
            expiresAt=expiresAt,
            id=id,
            scopes=scopes,
            token=token,
            tokenAuthScheme=tokenAuthScheme,
            tokenType=tokenType,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.social_auth_token_scopes import SocialAuthTokenScopes
