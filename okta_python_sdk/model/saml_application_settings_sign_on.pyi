# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class SamlApplicationSettingsSignOn(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class acsEndpoints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AcsEndpoint']:
                        return AcsEndpoint
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AcsEndpoint'], typing.List['AcsEndpoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'acsEndpoints':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AcsEndpoint':
                    return super().__getitem__(i)
            allowMultipleAcsEndpoints = schemas.BoolSchema
            assertionSigned = schemas.BoolSchema
            
            
            class attributeStatements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SamlAttributeStatement']:
                        return SamlAttributeStatement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SamlAttributeStatement'], typing.List['SamlAttributeStatement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attributeStatements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SamlAttributeStatement':
                    return super().__getitem__(i)
            audience = schemas.StrSchema
            audienceOverride = schemas.StrSchema
            authnContextClassRef = schemas.StrSchema
            defaultRelayState = schemas.StrSchema
            destination = schemas.StrSchema
            destinationOverride = schemas.StrSchema
            digestAlgorithm = schemas.StrSchema
            honorForceAuthn = schemas.BoolSchema
            idpIssuer = schemas.StrSchema
            
            
            class inlineHooks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SignOnInlineHook']:
                        return SignOnInlineHook
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SignOnInlineHook'], typing.List['SignOnInlineHook']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inlineHooks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SignOnInlineHook':
                    return super().__getitem__(i)
            recipient = schemas.StrSchema
            recipientOverride = schemas.StrSchema
            requestCompressed = schemas.BoolSchema
            responseSigned = schemas.BoolSchema
            samlSignedRequestEnabled = schemas.BoolSchema
            signatureAlgorithm = schemas.StrSchema
        
            @staticmethod
            def slo() -> typing.Type['SingleLogout']:
                return SingleLogout
        
            @staticmethod
            def spCertificate() -> typing.Type['SpCertificate']:
                return SpCertificate
            spIssuer = schemas.StrSchema
            ssoAcsUrl = schemas.StrSchema
            ssoAcsUrlOverride = schemas.StrSchema
            subjectNameIdFormat = schemas.StrSchema
            subjectNameIdTemplate = schemas.StrSchema
            __annotations__ = {
                "acsEndpoints": acsEndpoints,
                "allowMultipleAcsEndpoints": allowMultipleAcsEndpoints,
                "assertionSigned": assertionSigned,
                "attributeStatements": attributeStatements,
                "audience": audience,
                "audienceOverride": audienceOverride,
                "authnContextClassRef": authnContextClassRef,
                "defaultRelayState": defaultRelayState,
                "destination": destination,
                "destinationOverride": destinationOverride,
                "digestAlgorithm": digestAlgorithm,
                "honorForceAuthn": honorForceAuthn,
                "idpIssuer": idpIssuer,
                "inlineHooks": inlineHooks,
                "recipient": recipient,
                "recipientOverride": recipientOverride,
                "requestCompressed": requestCompressed,
                "responseSigned": responseSigned,
                "samlSignedRequestEnabled": samlSignedRequestEnabled,
                "signatureAlgorithm": signatureAlgorithm,
                "slo": slo,
                "spCertificate": spCertificate,
                "spIssuer": spIssuer,
                "ssoAcsUrl": ssoAcsUrl,
                "ssoAcsUrlOverride": ssoAcsUrlOverride,
                "subjectNameIdFormat": subjectNameIdFormat,
                "subjectNameIdTemplate": subjectNameIdTemplate,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acsEndpoints"]) -> MetaOapg.properties.acsEndpoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowMultipleAcsEndpoints"]) -> MetaOapg.properties.allowMultipleAcsEndpoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assertionSigned"]) -> MetaOapg.properties.assertionSigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeStatements"]) -> MetaOapg.properties.attributeStatements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audience"]) -> MetaOapg.properties.audience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audienceOverride"]) -> MetaOapg.properties.audienceOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authnContextClassRef"]) -> MetaOapg.properties.authnContextClassRef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultRelayState"]) -> MetaOapg.properties.defaultRelayState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> MetaOapg.properties.destination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationOverride"]) -> MetaOapg.properties.destinationOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestAlgorithm"]) -> MetaOapg.properties.digestAlgorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["honorForceAuthn"]) -> MetaOapg.properties.honorForceAuthn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idpIssuer"]) -> MetaOapg.properties.idpIssuer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineHooks"]) -> MetaOapg.properties.inlineHooks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> MetaOapg.properties.recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientOverride"]) -> MetaOapg.properties.recipientOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestCompressed"]) -> MetaOapg.properties.requestCompressed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responseSigned"]) -> MetaOapg.properties.responseSigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samlSignedRequestEnabled"]) -> MetaOapg.properties.samlSignedRequestEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureAlgorithm"]) -> MetaOapg.properties.signatureAlgorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slo"]) -> 'SingleLogout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spCertificate"]) -> 'SpCertificate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spIssuer"]) -> MetaOapg.properties.spIssuer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssoAcsUrl"]) -> MetaOapg.properties.ssoAcsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssoAcsUrlOverride"]) -> MetaOapg.properties.ssoAcsUrlOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectNameIdFormat"]) -> MetaOapg.properties.subjectNameIdFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectNameIdTemplate"]) -> MetaOapg.properties.subjectNameIdTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acsEndpoints", "allowMultipleAcsEndpoints", "assertionSigned", "attributeStatements", "audience", "audienceOverride", "authnContextClassRef", "defaultRelayState", "destination", "destinationOverride", "digestAlgorithm", "honorForceAuthn", "idpIssuer", "inlineHooks", "recipient", "recipientOverride", "requestCompressed", "responseSigned", "samlSignedRequestEnabled", "signatureAlgorithm", "slo", "spCertificate", "spIssuer", "ssoAcsUrl", "ssoAcsUrlOverride", "subjectNameIdFormat", "subjectNameIdTemplate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acsEndpoints"]) -> typing.Union[MetaOapg.properties.acsEndpoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowMultipleAcsEndpoints"]) -> typing.Union[MetaOapg.properties.allowMultipleAcsEndpoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assertionSigned"]) -> typing.Union[MetaOapg.properties.assertionSigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeStatements"]) -> typing.Union[MetaOapg.properties.attributeStatements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audience"]) -> typing.Union[MetaOapg.properties.audience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audienceOverride"]) -> typing.Union[MetaOapg.properties.audienceOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authnContextClassRef"]) -> typing.Union[MetaOapg.properties.authnContextClassRef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultRelayState"]) -> typing.Union[MetaOapg.properties.defaultRelayState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union[MetaOapg.properties.destination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationOverride"]) -> typing.Union[MetaOapg.properties.destinationOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestAlgorithm"]) -> typing.Union[MetaOapg.properties.digestAlgorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["honorForceAuthn"]) -> typing.Union[MetaOapg.properties.honorForceAuthn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idpIssuer"]) -> typing.Union[MetaOapg.properties.idpIssuer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineHooks"]) -> typing.Union[MetaOapg.properties.inlineHooks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union[MetaOapg.properties.recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientOverride"]) -> typing.Union[MetaOapg.properties.recipientOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestCompressed"]) -> typing.Union[MetaOapg.properties.requestCompressed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responseSigned"]) -> typing.Union[MetaOapg.properties.responseSigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samlSignedRequestEnabled"]) -> typing.Union[MetaOapg.properties.samlSignedRequestEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureAlgorithm"]) -> typing.Union[MetaOapg.properties.signatureAlgorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slo"]) -> typing.Union['SingleLogout', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spCertificate"]) -> typing.Union['SpCertificate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spIssuer"]) -> typing.Union[MetaOapg.properties.spIssuer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssoAcsUrl"]) -> typing.Union[MetaOapg.properties.ssoAcsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssoAcsUrlOverride"]) -> typing.Union[MetaOapg.properties.ssoAcsUrlOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectNameIdFormat"]) -> typing.Union[MetaOapg.properties.subjectNameIdFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectNameIdTemplate"]) -> typing.Union[MetaOapg.properties.subjectNameIdTemplate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acsEndpoints", "allowMultipleAcsEndpoints", "assertionSigned", "attributeStatements", "audience", "audienceOverride", "authnContextClassRef", "defaultRelayState", "destination", "destinationOverride", "digestAlgorithm", "honorForceAuthn", "idpIssuer", "inlineHooks", "recipient", "recipientOverride", "requestCompressed", "responseSigned", "samlSignedRequestEnabled", "signatureAlgorithm", "slo", "spCertificate", "spIssuer", "ssoAcsUrl", "ssoAcsUrlOverride", "subjectNameIdFormat", "subjectNameIdTemplate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        acsEndpoints: typing.Union[MetaOapg.properties.acsEndpoints, list, tuple, schemas.Unset] = schemas.unset,
        allowMultipleAcsEndpoints: typing.Union[MetaOapg.properties.allowMultipleAcsEndpoints, bool, schemas.Unset] = schemas.unset,
        assertionSigned: typing.Union[MetaOapg.properties.assertionSigned, bool, schemas.Unset] = schemas.unset,
        attributeStatements: typing.Union[MetaOapg.properties.attributeStatements, list, tuple, schemas.Unset] = schemas.unset,
        audience: typing.Union[MetaOapg.properties.audience, str, schemas.Unset] = schemas.unset,
        audienceOverride: typing.Union[MetaOapg.properties.audienceOverride, str, schemas.Unset] = schemas.unset,
        authnContextClassRef: typing.Union[MetaOapg.properties.authnContextClassRef, str, schemas.Unset] = schemas.unset,
        defaultRelayState: typing.Union[MetaOapg.properties.defaultRelayState, str, schemas.Unset] = schemas.unset,
        destination: typing.Union[MetaOapg.properties.destination, str, schemas.Unset] = schemas.unset,
        destinationOverride: typing.Union[MetaOapg.properties.destinationOverride, str, schemas.Unset] = schemas.unset,
        digestAlgorithm: typing.Union[MetaOapg.properties.digestAlgorithm, str, schemas.Unset] = schemas.unset,
        honorForceAuthn: typing.Union[MetaOapg.properties.honorForceAuthn, bool, schemas.Unset] = schemas.unset,
        idpIssuer: typing.Union[MetaOapg.properties.idpIssuer, str, schemas.Unset] = schemas.unset,
        inlineHooks: typing.Union[MetaOapg.properties.inlineHooks, list, tuple, schemas.Unset] = schemas.unset,
        recipient: typing.Union[MetaOapg.properties.recipient, str, schemas.Unset] = schemas.unset,
        recipientOverride: typing.Union[MetaOapg.properties.recipientOverride, str, schemas.Unset] = schemas.unset,
        requestCompressed: typing.Union[MetaOapg.properties.requestCompressed, bool, schemas.Unset] = schemas.unset,
        responseSigned: typing.Union[MetaOapg.properties.responseSigned, bool, schemas.Unset] = schemas.unset,
        samlSignedRequestEnabled: typing.Union[MetaOapg.properties.samlSignedRequestEnabled, bool, schemas.Unset] = schemas.unset,
        signatureAlgorithm: typing.Union[MetaOapg.properties.signatureAlgorithm, str, schemas.Unset] = schemas.unset,
        slo: typing.Union['SingleLogout', schemas.Unset] = schemas.unset,
        spCertificate: typing.Union['SpCertificate', schemas.Unset] = schemas.unset,
        spIssuer: typing.Union[MetaOapg.properties.spIssuer, str, schemas.Unset] = schemas.unset,
        ssoAcsUrl: typing.Union[MetaOapg.properties.ssoAcsUrl, str, schemas.Unset] = schemas.unset,
        ssoAcsUrlOverride: typing.Union[MetaOapg.properties.ssoAcsUrlOverride, str, schemas.Unset] = schemas.unset,
        subjectNameIdFormat: typing.Union[MetaOapg.properties.subjectNameIdFormat, str, schemas.Unset] = schemas.unset,
        subjectNameIdTemplate: typing.Union[MetaOapg.properties.subjectNameIdTemplate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SamlApplicationSettingsSignOn':
        return super().__new__(
            cls,
            *args,
            acsEndpoints=acsEndpoints,
            allowMultipleAcsEndpoints=allowMultipleAcsEndpoints,
            assertionSigned=assertionSigned,
            attributeStatements=attributeStatements,
            audience=audience,
            audienceOverride=audienceOverride,
            authnContextClassRef=authnContextClassRef,
            defaultRelayState=defaultRelayState,
            destination=destination,
            destinationOverride=destinationOverride,
            digestAlgorithm=digestAlgorithm,
            honorForceAuthn=honorForceAuthn,
            idpIssuer=idpIssuer,
            inlineHooks=inlineHooks,
            recipient=recipient,
            recipientOverride=recipientOverride,
            requestCompressed=requestCompressed,
            responseSigned=responseSigned,
            samlSignedRequestEnabled=samlSignedRequestEnabled,
            signatureAlgorithm=signatureAlgorithm,
            slo=slo,
            spCertificate=spCertificate,
            spIssuer=spIssuer,
            ssoAcsUrl=ssoAcsUrl,
            ssoAcsUrlOverride=ssoAcsUrlOverride,
            subjectNameIdFormat=subjectNameIdFormat,
            subjectNameIdTemplate=subjectNameIdTemplate,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.acs_endpoint import AcsEndpoint
from okta_python_sdk.model.saml_attribute_statement import SamlAttributeStatement
from okta_python_sdk.model.sign_on_inline_hook import SignOnInlineHook
from okta_python_sdk.model.single_logout import SingleLogout
from okta_python_sdk.model.sp_certificate import SpCertificate
