# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class SwaThreeFieldApplicationSettingsApplication(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            buttonSelector = schemas.StrSchema
            extraFieldSelector = schemas.StrSchema
            extraFieldValue = schemas.StrSchema
            loginUrlRegex = schemas.StrSchema
            passwordSelector = schemas.StrSchema
            targetURL = schemas.StrSchema
            userNameSelector = schemas.StrSchema
            __annotations__ = {
                "buttonSelector": buttonSelector,
                "extraFieldSelector": extraFieldSelector,
                "extraFieldValue": extraFieldValue,
                "loginUrlRegex": loginUrlRegex,
                "passwordSelector": passwordSelector,
                "targetURL": targetURL,
                "userNameSelector": userNameSelector,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttonSelector"]) -> MetaOapg.properties.buttonSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraFieldSelector"]) -> MetaOapg.properties.extraFieldSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extraFieldValue"]) -> MetaOapg.properties.extraFieldValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loginUrlRegex"]) -> MetaOapg.properties.loginUrlRegex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordSelector"]) -> MetaOapg.properties.passwordSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetURL"]) -> MetaOapg.properties.targetURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userNameSelector"]) -> MetaOapg.properties.userNameSelector: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buttonSelector", "extraFieldSelector", "extraFieldValue", "loginUrlRegex", "passwordSelector", "targetURL", "userNameSelector", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttonSelector"]) -> typing.Union[MetaOapg.properties.buttonSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraFieldSelector"]) -> typing.Union[MetaOapg.properties.extraFieldSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extraFieldValue"]) -> typing.Union[MetaOapg.properties.extraFieldValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loginUrlRegex"]) -> typing.Union[MetaOapg.properties.loginUrlRegex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordSelector"]) -> typing.Union[MetaOapg.properties.passwordSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetURL"]) -> typing.Union[MetaOapg.properties.targetURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userNameSelector"]) -> typing.Union[MetaOapg.properties.userNameSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buttonSelector", "extraFieldSelector", "extraFieldValue", "loginUrlRegex", "passwordSelector", "targetURL", "userNameSelector", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        buttonSelector: typing.Union[MetaOapg.properties.buttonSelector, str, schemas.Unset] = schemas.unset,
        extraFieldSelector: typing.Union[MetaOapg.properties.extraFieldSelector, str, schemas.Unset] = schemas.unset,
        extraFieldValue: typing.Union[MetaOapg.properties.extraFieldValue, str, schemas.Unset] = schemas.unset,
        loginUrlRegex: typing.Union[MetaOapg.properties.loginUrlRegex, str, schemas.Unset] = schemas.unset,
        passwordSelector: typing.Union[MetaOapg.properties.passwordSelector, str, schemas.Unset] = schemas.unset,
        targetURL: typing.Union[MetaOapg.properties.targetURL, str, schemas.Unset] = schemas.unset,
        userNameSelector: typing.Union[MetaOapg.properties.userNameSelector, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SwaThreeFieldApplicationSettingsApplication':
        return super().__new__(
            cls,
            *args,
            buttonSelector=buttonSelector,
            extraFieldSelector=extraFieldSelector,
            extraFieldValue=extraFieldValue,
            loginUrlRegex=loginUrlRegex,
            passwordSelector=passwordSelector,
            targetURL=targetURL,
            userNameSelector=userNameSelector,
            _configuration=_configuration,
            **kwargs,
        )
