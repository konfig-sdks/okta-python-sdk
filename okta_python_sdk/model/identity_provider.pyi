# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class IdentityProvider(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['IdentityProviderLinks']:
                return IdentityProviderLinks
            created = schemas.DateTimeSchema
            id = schemas.StrSchema
            
            
            class issuerMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ORG_URL(cls):
                    return cls("ORG_URL")
                
                @schemas.classproperty
                def CUSTOM_URL(cls):
                    return cls("CUSTOM_URL")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("DYNAMIC")
            lastUpdated = schemas.DateTimeSchema
            name = schemas.StrSchema
        
            @staticmethod
            def policy() -> typing.Type['IdentityProviderPolicy']:
                return IdentityProviderPolicy
        
            @staticmethod
            def protocol() -> typing.Type['Protocol']:
                return Protocol
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SAML2(cls):
                    return cls("SAML2")
                
                @schemas.classproperty
                def GOOGLE(cls):
                    return cls("GOOGLE")
                
                @schemas.classproperty
                def FACEBOOK(cls):
                    return cls("FACEBOOK")
                
                @schemas.classproperty
                def LINKEDIN(cls):
                    return cls("LINKEDIN")
                
                @schemas.classproperty
                def MICROSOFT(cls):
                    return cls("MICROSOFT")
                
                @schemas.classproperty
                def OIDC(cls):
                    return cls("OIDC")
                
                @schemas.classproperty
                def OKTA(cls):
                    return cls("OKTA")
                
                @schemas.classproperty
                def IWA(cls):
                    return cls("IWA")
                
                @schemas.classproperty
                def AGENTLESS_DSSO(cls):
                    return cls("AgentlessDSSO")
                
                @schemas.classproperty
                def X509(cls):
                    return cls("X509")
            __annotations__ = {
                "_links": _links,
                "created": created,
                "id": id,
                "issuerMode": issuerMode,
                "lastUpdated": lastUpdated,
                "name": name,
                "policy": policy,
                "protocol": protocol,
                "status": status,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'IdentityProviderLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuerMode"]) -> MetaOapg.properties.issuerMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy"]) -> 'IdentityProviderPolicy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> 'Protocol': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "created", "id", "issuerMode", "lastUpdated", "name", "policy", "protocol", "status", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['IdentityProviderLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuerMode"]) -> typing.Union[MetaOapg.properties.issuerMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union['IdentityProviderPolicy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union['Protocol', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "created", "id", "issuerMode", "lastUpdated", "name", "policy", "protocol", "status", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['IdentityProviderLinks', schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        issuerMode: typing.Union[MetaOapg.properties.issuerMode, str, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, datetime, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        policy: typing.Union['IdentityProviderPolicy', schemas.Unset] = schemas.unset,
        protocol: typing.Union['Protocol', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdentityProvider':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            created=created,
            id=id,
            issuerMode=issuerMode,
            lastUpdated=lastUpdated,
            name=name,
            policy=policy,
            protocol=protocol,
            status=status,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.identity_provider_links import IdentityProviderLinks
from okta_python_sdk.model.identity_provider_policy import IdentityProviderPolicy
from okta_python_sdk.model.protocol import Protocol
