# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class AppLink(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            appAssignmentId = schemas.StrSchema
            appInstanceId = schemas.StrSchema
            appName = schemas.StrSchema
            credentialsSetup = schemas.BoolSchema
            hidden = schemas.BoolSchema
            id = schemas.StrSchema
            label = schemas.StrSchema
            linkUrl = schemas.StrSchema
            logoUrl = schemas.StrSchema
            sortOrder = schemas.IntSchema
            __annotations__ = {
                "appAssignmentId": appAssignmentId,
                "appInstanceId": appInstanceId,
                "appName": appName,
                "credentialsSetup": credentialsSetup,
                "hidden": hidden,
                "id": id,
                "label": label,
                "linkUrl": linkUrl,
                "logoUrl": logoUrl,
                "sortOrder": sortOrder,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appAssignmentId"]) -> MetaOapg.properties.appAssignmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appInstanceId"]) -> MetaOapg.properties.appInstanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appName"]) -> MetaOapg.properties.appName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialsSetup"]) -> MetaOapg.properties.credentialsSetup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkUrl"]) -> MetaOapg.properties.linkUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["appAssignmentId", "appInstanceId", "appName", "credentialsSetup", "hidden", "id", "label", "linkUrl", "logoUrl", "sortOrder", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appAssignmentId"]) -> typing.Union[MetaOapg.properties.appAssignmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appInstanceId"]) -> typing.Union[MetaOapg.properties.appInstanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appName"]) -> typing.Union[MetaOapg.properties.appName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialsSetup"]) -> typing.Union[MetaOapg.properties.credentialsSetup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkUrl"]) -> typing.Union[MetaOapg.properties.linkUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["appAssignmentId", "appInstanceId", "appName", "credentialsSetup", "hidden", "id", "label", "linkUrl", "logoUrl", "sortOrder", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        appAssignmentId: typing.Union[MetaOapg.properties.appAssignmentId, str, schemas.Unset] = schemas.unset,
        appInstanceId: typing.Union[MetaOapg.properties.appInstanceId, str, schemas.Unset] = schemas.unset,
        appName: typing.Union[MetaOapg.properties.appName, str, schemas.Unset] = schemas.unset,
        credentialsSetup: typing.Union[MetaOapg.properties.credentialsSetup, bool, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        linkUrl: typing.Union[MetaOapg.properties.linkUrl, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AppLink':
        return super().__new__(
            cls,
            *args,
            appAssignmentId=appAssignmentId,
            appInstanceId=appInstanceId,
            appName=appName,
            credentialsSetup=credentialsSetup,
            hidden=hidden,
            id=id,
            label=label,
            linkUrl=linkUrl,
            logoUrl=logoUrl,
            sortOrder=sortOrder,
            _configuration=_configuration,
            **kwargs,
        )
