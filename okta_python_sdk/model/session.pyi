# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class Session(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['SessionLinks']:
                return SessionLinks
            
            
            class amr(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SessionAuthenticationMethod']:
                        return SessionAuthenticationMethod
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SessionAuthenticationMethod'], typing.List['SessionAuthenticationMethod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amr':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SessionAuthenticationMethod':
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            expiresAt = schemas.DateTimeSchema
            id = schemas.StrSchema
        
            @staticmethod
            def idp() -> typing.Type['SessionIdentityProvider']:
                return SessionIdentityProvider
            lastFactorVerification = schemas.DateTimeSchema
            lastPasswordVerification = schemas.DateTimeSchema
            login = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['SessionStatus']:
                return SessionStatus
            userId = schemas.StrSchema
            __annotations__ = {
                "_links": _links,
                "amr": amr,
                "createdAt": createdAt,
                "expiresAt": expiresAt,
                "id": id,
                "idp": idp,
                "lastFactorVerification": lastFactorVerification,
                "lastPasswordVerification": lastPasswordVerification,
                "login": login,
                "status": status,
                "userId": userId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'SessionLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amr"]) -> MetaOapg.properties.amr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idp"]) -> 'SessionIdentityProvider': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFactorVerification"]) -> MetaOapg.properties.lastFactorVerification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPasswordVerification"]) -> MetaOapg.properties.lastPasswordVerification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login"]) -> MetaOapg.properties.login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'SessionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "amr", "createdAt", "expiresAt", "id", "idp", "lastFactorVerification", "lastPasswordVerification", "login", "status", "userId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['SessionLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amr"]) -> typing.Union[MetaOapg.properties.amr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idp"]) -> typing.Union['SessionIdentityProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFactorVerification"]) -> typing.Union[MetaOapg.properties.lastFactorVerification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPasswordVerification"]) -> typing.Union[MetaOapg.properties.lastPasswordVerification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login"]) -> typing.Union[MetaOapg.properties.login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['SessionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "amr", "createdAt", "expiresAt", "id", "idp", "lastFactorVerification", "lastPasswordVerification", "login", "status", "userId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['SessionLinks', schemas.Unset] = schemas.unset,
        amr: typing.Union[MetaOapg.properties.amr, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        idp: typing.Union['SessionIdentityProvider', schemas.Unset] = schemas.unset,
        lastFactorVerification: typing.Union[MetaOapg.properties.lastFactorVerification, str, datetime, schemas.Unset] = schemas.unset,
        lastPasswordVerification: typing.Union[MetaOapg.properties.lastPasswordVerification, str, datetime, schemas.Unset] = schemas.unset,
        login: typing.Union[MetaOapg.properties.login, str, schemas.Unset] = schemas.unset,
        status: typing.Union['SessionStatus', schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Session':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            amr=amr,
            createdAt=createdAt,
            expiresAt=expiresAt,
            id=id,
            idp=idp,
            lastFactorVerification=lastFactorVerification,
            lastPasswordVerification=lastPasswordVerification,
            login=login,
            status=status,
            userId=userId,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.session_authentication_method import SessionAuthenticationMethod
from okta_python_sdk.model.session_identity_provider import SessionIdentityProvider
from okta_python_sdk.model.session_links import SessionLinks
from okta_python_sdk.model.session_status import SessionStatus
