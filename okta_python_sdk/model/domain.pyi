# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class Domain(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def certificateSourceType() -> typing.Type['DomainCertificateSourceType']:
                return DomainCertificateSourceType
            
            
            class dnsRecords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DNSRecord']:
                        return DNSRecord
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DNSRecord'], typing.List['DNSRecord']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dnsRecords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DNSRecord':
                    return super().__getitem__(i)
            domain = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def publicCertificate() -> typing.Type['DomainCertificateMetadata']:
                return DomainCertificateMetadata
        
            @staticmethod
            def validationStatus() -> typing.Type['DomainValidationStatus']:
                return DomainValidationStatus
            __annotations__ = {
                "certificateSourceType": certificateSourceType,
                "dnsRecords": dnsRecords,
                "domain": domain,
                "id": id,
                "publicCertificate": publicCertificate,
                "validationStatus": validationStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateSourceType"]) -> 'DomainCertificateSourceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dnsRecords"]) -> MetaOapg.properties.dnsRecords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicCertificate"]) -> 'DomainCertificateMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationStatus"]) -> 'DomainValidationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["certificateSourceType", "dnsRecords", "domain", "id", "publicCertificate", "validationStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateSourceType"]) -> typing.Union['DomainCertificateSourceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dnsRecords"]) -> typing.Union[MetaOapg.properties.dnsRecords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicCertificate"]) -> typing.Union['DomainCertificateMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationStatus"]) -> typing.Union['DomainValidationStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["certificateSourceType", "dnsRecords", "domain", "id", "publicCertificate", "validationStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        certificateSourceType: typing.Union['DomainCertificateSourceType', schemas.Unset] = schemas.unset,
        dnsRecords: typing.Union[MetaOapg.properties.dnsRecords, list, tuple, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        publicCertificate: typing.Union['DomainCertificateMetadata', schemas.Unset] = schemas.unset,
        validationStatus: typing.Union['DomainValidationStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Domain':
        return super().__new__(
            cls,
            *args,
            certificateSourceType=certificateSourceType,
            dnsRecords=dnsRecords,
            domain=domain,
            id=id,
            publicCertificate=publicCertificate,
            validationStatus=validationStatus,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.dns_record import DNSRecord
from okta_python_sdk.model.domain_certificate_metadata import DomainCertificateMetadata
from okta_python_sdk.model.domain_certificate_source_type import DomainCertificateSourceType
from okta_python_sdk.model.domain_validation_status import DomainValidationStatus
