# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class UserPolicyRuleCondition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def exclude() -> typing.Type['UserPolicyRuleConditionExclude']:
                return UserPolicyRuleConditionExclude
        
            @staticmethod
            def inactivity() -> typing.Type['InactivityPolicyRuleCondition']:
                return InactivityPolicyRuleCondition
        
            @staticmethod
            def include() -> typing.Type['UserPolicyRuleConditionInclude']:
                return UserPolicyRuleConditionInclude
        
            @staticmethod
            def lifecycleExpiration() -> typing.Type['LifecycleExpirationPolicyRuleCondition']:
                return LifecycleExpirationPolicyRuleCondition
        
            @staticmethod
            def passwordExpiration() -> typing.Type['PasswordExpirationPolicyRuleCondition']:
                return PasswordExpirationPolicyRuleCondition
        
            @staticmethod
            def userLifecycleAttribute() -> typing.Type['UserLifecycleAttributePolicyRuleCondition']:
                return UserLifecycleAttributePolicyRuleCondition
            __annotations__ = {
                "exclude": exclude,
                "inactivity": inactivity,
                "include": include,
                "lifecycleExpiration": lifecycleExpiration,
                "passwordExpiration": passwordExpiration,
                "userLifecycleAttribute": userLifecycleAttribute,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclude"]) -> 'UserPolicyRuleConditionExclude': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inactivity"]) -> 'InactivityPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include"]) -> 'UserPolicyRuleConditionInclude': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lifecycleExpiration"]) -> 'LifecycleExpirationPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordExpiration"]) -> 'PasswordExpirationPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userLifecycleAttribute"]) -> 'UserLifecycleAttributePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exclude", "inactivity", "include", "lifecycleExpiration", "passwordExpiration", "userLifecycleAttribute", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclude"]) -> typing.Union['UserPolicyRuleConditionExclude', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inactivity"]) -> typing.Union['InactivityPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include"]) -> typing.Union['UserPolicyRuleConditionInclude', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lifecycleExpiration"]) -> typing.Union['LifecycleExpirationPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordExpiration"]) -> typing.Union['PasswordExpirationPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userLifecycleAttribute"]) -> typing.Union['UserLifecycleAttributePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exclude", "inactivity", "include", "lifecycleExpiration", "passwordExpiration", "userLifecycleAttribute", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        exclude: typing.Union['UserPolicyRuleConditionExclude', schemas.Unset] = schemas.unset,
        inactivity: typing.Union['InactivityPolicyRuleCondition', schemas.Unset] = schemas.unset,
        include: typing.Union['UserPolicyRuleConditionInclude', schemas.Unset] = schemas.unset,
        lifecycleExpiration: typing.Union['LifecycleExpirationPolicyRuleCondition', schemas.Unset] = schemas.unset,
        passwordExpiration: typing.Union['PasswordExpirationPolicyRuleCondition', schemas.Unset] = schemas.unset,
        userLifecycleAttribute: typing.Union['UserLifecycleAttributePolicyRuleCondition', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserPolicyRuleCondition':
        return super().__new__(
            cls,
            *args,
            exclude=exclude,
            inactivity=inactivity,
            include=include,
            lifecycleExpiration=lifecycleExpiration,
            passwordExpiration=passwordExpiration,
            userLifecycleAttribute=userLifecycleAttribute,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.inactivity_policy_rule_condition import InactivityPolicyRuleCondition
from okta_python_sdk.model.lifecycle_expiration_policy_rule_condition import LifecycleExpirationPolicyRuleCondition
from okta_python_sdk.model.password_expiration_policy_rule_condition import PasswordExpirationPolicyRuleCondition
from okta_python_sdk.model.user_lifecycle_attribute_policy_rule_condition import UserLifecycleAttributePolicyRuleCondition
from okta_python_sdk.model.user_policy_rule_condition_exclude import UserPolicyRuleConditionExclude
from okta_python_sdk.model.user_policy_rule_condition_include import UserPolicyRuleConditionInclude
