# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PasswordPolicyPasswordSettingsComplexity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def dictionary() -> typing.Type['PasswordDictionary']:
                return PasswordDictionary
        
            @staticmethod
            def excludeAttributes() -> typing.Type['PasswordPolicyPasswordSettingsComplexityExcludeAttributes']:
                return PasswordPolicyPasswordSettingsComplexityExcludeAttributes
            excludeUsername = schemas.BoolSchema
            minLength = schemas.IntSchema
            minLowerCase = schemas.IntSchema
            minNumber = schemas.IntSchema
            minSymbol = schemas.IntSchema
            minUpperCase = schemas.IntSchema
            __annotations__ = {
                "dictionary": dictionary,
                "excludeAttributes": excludeAttributes,
                "excludeUsername": excludeUsername,
                "minLength": minLength,
                "minLowerCase": minLowerCase,
                "minNumber": minNumber,
                "minSymbol": minSymbol,
                "minUpperCase": minUpperCase,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dictionary"]) -> 'PasswordDictionary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeAttributes"]) -> 'PasswordPolicyPasswordSettingsComplexityExcludeAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeUsername"]) -> MetaOapg.properties.excludeUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLength"]) -> MetaOapg.properties.minLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLowerCase"]) -> MetaOapg.properties.minLowerCase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minNumber"]) -> MetaOapg.properties.minNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minSymbol"]) -> MetaOapg.properties.minSymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minUpperCase"]) -> MetaOapg.properties.minUpperCase: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dictionary", "excludeAttributes", "excludeUsername", "minLength", "minLowerCase", "minNumber", "minSymbol", "minUpperCase", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dictionary"]) -> typing.Union['PasswordDictionary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeAttributes"]) -> typing.Union['PasswordPolicyPasswordSettingsComplexityExcludeAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeUsername"]) -> typing.Union[MetaOapg.properties.excludeUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLength"]) -> typing.Union[MetaOapg.properties.minLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLowerCase"]) -> typing.Union[MetaOapg.properties.minLowerCase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minNumber"]) -> typing.Union[MetaOapg.properties.minNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minSymbol"]) -> typing.Union[MetaOapg.properties.minSymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minUpperCase"]) -> typing.Union[MetaOapg.properties.minUpperCase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dictionary", "excludeAttributes", "excludeUsername", "minLength", "minLowerCase", "minNumber", "minSymbol", "minUpperCase", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dictionary: typing.Union['PasswordDictionary', schemas.Unset] = schemas.unset,
        excludeAttributes: typing.Union['PasswordPolicyPasswordSettingsComplexityExcludeAttributes', schemas.Unset] = schemas.unset,
        excludeUsername: typing.Union[MetaOapg.properties.excludeUsername, bool, schemas.Unset] = schemas.unset,
        minLength: typing.Union[MetaOapg.properties.minLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minLowerCase: typing.Union[MetaOapg.properties.minLowerCase, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minNumber: typing.Union[MetaOapg.properties.minNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minSymbol: typing.Union[MetaOapg.properties.minSymbol, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minUpperCase: typing.Union[MetaOapg.properties.minUpperCase, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordPolicyPasswordSettingsComplexity':
        return super().__new__(
            cls,
            *args,
            dictionary=dictionary,
            excludeAttributes=excludeAttributes,
            excludeUsername=excludeUsername,
            minLength=minLength,
            minLowerCase=minLowerCase,
            minNumber=minNumber,
            minSymbol=minSymbol,
            minUpperCase=minUpperCase,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.password_dictionary import PasswordDictionary
from okta_python_sdk.model.password_policy_password_settings_complexity_exclude_attributes import PasswordPolicyPasswordSettingsComplexityExcludeAttributes
