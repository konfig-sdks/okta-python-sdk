# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class AuthenticatorProviderConfiguration(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            authPort = schemas.IntSchema
            host = schemas.StrSchema
            hostName = schemas.StrSchema
            instanceId = schemas.StrSchema
            integrationKey = schemas.StrSchema
            secretKey = schemas.StrSchema
            sharedSecret = schemas.StrSchema
        
            @staticmethod
            def userNameTemplate() -> typing.Type['AuthenticatorProviderConfigurationUserNamePlate']:
                return AuthenticatorProviderConfigurationUserNamePlate
            __annotations__ = {
                "authPort": authPort,
                "host": host,
                "hostName": hostName,
                "instanceId": instanceId,
                "integrationKey": integrationKey,
                "secretKey": secretKey,
                "sharedSecret": sharedSecret,
                "userNameTemplate": userNameTemplate,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authPort"]) -> MetaOapg.properties.authPort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostName"]) -> MetaOapg.properties.hostName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceId"]) -> MetaOapg.properties.instanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integrationKey"]) -> MetaOapg.properties.integrationKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretKey"]) -> MetaOapg.properties.secretKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharedSecret"]) -> MetaOapg.properties.sharedSecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userNameTemplate"]) -> 'AuthenticatorProviderConfigurationUserNamePlate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authPort", "host", "hostName", "instanceId", "integrationKey", "secretKey", "sharedSecret", "userNameTemplate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authPort"]) -> typing.Union[MetaOapg.properties.authPort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostName"]) -> typing.Union[MetaOapg.properties.hostName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceId"]) -> typing.Union[MetaOapg.properties.instanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integrationKey"]) -> typing.Union[MetaOapg.properties.integrationKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretKey"]) -> typing.Union[MetaOapg.properties.secretKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharedSecret"]) -> typing.Union[MetaOapg.properties.sharedSecret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userNameTemplate"]) -> typing.Union['AuthenticatorProviderConfigurationUserNamePlate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authPort", "host", "hostName", "instanceId", "integrationKey", "secretKey", "sharedSecret", "userNameTemplate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        authPort: typing.Union[MetaOapg.properties.authPort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        hostName: typing.Union[MetaOapg.properties.hostName, str, schemas.Unset] = schemas.unset,
        instanceId: typing.Union[MetaOapg.properties.instanceId, str, schemas.Unset] = schemas.unset,
        integrationKey: typing.Union[MetaOapg.properties.integrationKey, str, schemas.Unset] = schemas.unset,
        secretKey: typing.Union[MetaOapg.properties.secretKey, str, schemas.Unset] = schemas.unset,
        sharedSecret: typing.Union[MetaOapg.properties.sharedSecret, str, schemas.Unset] = schemas.unset,
        userNameTemplate: typing.Union['AuthenticatorProviderConfigurationUserNamePlate', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthenticatorProviderConfiguration':
        return super().__new__(
            cls,
            *args,
            authPort=authPort,
            host=host,
            hostName=hostName,
            instanceId=instanceId,
            integrationKey=integrationKey,
            secretKey=secretKey,
            sharedSecret=sharedSecret,
            userNameTemplate=userNameTemplate,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.authenticator_provider_configuration_user_name_plate import AuthenticatorProviderConfigurationUserNamePlate
