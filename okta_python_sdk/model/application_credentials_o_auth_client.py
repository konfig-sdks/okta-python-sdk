# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class ApplicationCredentialsOAuthClient(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            autoKeyRotation = schemas.BoolSchema
            client_id = schemas.StrSchema
            client_secret = schemas.StrSchema
            pkce_required = schemas.BoolSchema
        
            @staticmethod
            def token_endpoint_auth_method() -> typing.Type['OAuthEndpointAuthenticationMethod']:
                return OAuthEndpointAuthenticationMethod
            __annotations__ = {
                "autoKeyRotation": autoKeyRotation,
                "client_id": client_id,
                "client_secret": client_secret,
                "pkce_required": pkce_required,
                "token_endpoint_auth_method": token_endpoint_auth_method,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoKeyRotation"]) -> MetaOapg.properties.autoKeyRotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_secret"]) -> MetaOapg.properties.client_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pkce_required"]) -> MetaOapg.properties.pkce_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_endpoint_auth_method"]) -> 'OAuthEndpointAuthenticationMethod': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["autoKeyRotation", "client_id", "client_secret", "pkce_required", "token_endpoint_auth_method", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoKeyRotation"]) -> typing.Union[MetaOapg.properties.autoKeyRotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_secret"]) -> typing.Union[MetaOapg.properties.client_secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pkce_required"]) -> typing.Union[MetaOapg.properties.pkce_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_endpoint_auth_method"]) -> typing.Union['OAuthEndpointAuthenticationMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autoKeyRotation", "client_id", "client_secret", "pkce_required", "token_endpoint_auth_method", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        autoKeyRotation: typing.Union[MetaOapg.properties.autoKeyRotation, bool, schemas.Unset] = schemas.unset,
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        client_secret: typing.Union[MetaOapg.properties.client_secret, str, schemas.Unset] = schemas.unset,
        pkce_required: typing.Union[MetaOapg.properties.pkce_required, bool, schemas.Unset] = schemas.unset,
        token_endpoint_auth_method: typing.Union['OAuthEndpointAuthenticationMethod', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicationCredentialsOAuthClient':
        return super().__new__(
            cls,
            *args,
            autoKeyRotation=autoKeyRotation,
            client_id=client_id,
            client_secret=client_secret,
            pkce_required=pkce_required,
            token_endpoint_auth_method=token_endpoint_auth_method,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.o_auth_endpoint_authentication_method import OAuthEndpointAuthenticationMethod
