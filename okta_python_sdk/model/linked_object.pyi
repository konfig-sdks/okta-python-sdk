# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class LinkedObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['LinkedObjectLinks']:
                return LinkedObjectLinks
        
            @staticmethod
            def associated() -> typing.Type['LinkedObjectDetails']:
                return LinkedObjectDetails
        
            @staticmethod
            def primary() -> typing.Type['LinkedObjectDetails']:
                return LinkedObjectDetails
            __annotations__ = {
                "_links": _links,
                "associated": associated,
                "primary": primary,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'LinkedObjectLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associated"]) -> 'LinkedObjectDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> 'LinkedObjectDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "associated", "primary", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['LinkedObjectLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associated"]) -> typing.Union['LinkedObjectDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union['LinkedObjectDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "associated", "primary", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['LinkedObjectLinks', schemas.Unset] = schemas.unset,
        associated: typing.Union['LinkedObjectDetails', schemas.Unset] = schemas.unset,
        primary: typing.Union['LinkedObjectDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkedObject':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            associated=associated,
            primary=primary,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.linked_object_details import LinkedObjectDetails
from okta_python_sdk.model.linked_object_links import LinkedObjectLinks
