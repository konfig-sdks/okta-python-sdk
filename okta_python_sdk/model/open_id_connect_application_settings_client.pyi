# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class OpenIdConnectApplicationSettingsClient(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def application_type() -> typing.Type['OpenIdConnectApplicationType']:
                return OpenIdConnectApplicationType
            client_uri = schemas.StrSchema
        
            @staticmethod
            def consent_method() -> typing.Type['OpenIdConnectApplicationConsentMethod']:
                return OpenIdConnectApplicationConsentMethod
            
            
            class grant_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OAuthGrantType']:
                        return OAuthGrantType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OAuthGrantType'], typing.List['OAuthGrantType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grant_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OAuthGrantType':
                    return super().__getitem__(i)
        
            @staticmethod
            def idp_initiated_login() -> typing.Type['OpenIdConnectApplicationIdpInitiatedLogin']:
                return OpenIdConnectApplicationIdpInitiatedLogin
            initiate_login_uri = schemas.StrSchema
        
            @staticmethod
            def issuer_mode() -> typing.Type['OpenIdConnectApplicationIssuerMode']:
                return OpenIdConnectApplicationIssuerMode
        
            @staticmethod
            def jwks() -> typing.Type['OpenIdConnectApplicationSettingsClientKeys']:
                return OpenIdConnectApplicationSettingsClientKeys
            logo_uri = schemas.StrSchema
            policy_uri = schemas.StrSchema
            
            
            class post_logout_redirect_uris(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'post_logout_redirect_uris':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class redirect_uris(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'redirect_uris':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def refresh_token() -> typing.Type['OpenIdConnectApplicationSettingsRefreshToken']:
                return OpenIdConnectApplicationSettingsRefreshToken
            
            
            class response_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OAuthResponseType']:
                        return OAuthResponseType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OAuthResponseType'], typing.List['OAuthResponseType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'response_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OAuthResponseType':
                    return super().__getitem__(i)
            tos_uri = schemas.StrSchema
            wildcard_redirect = schemas.StrSchema
            __annotations__ = {
                "application_type": application_type,
                "client_uri": client_uri,
                "consent_method": consent_method,
                "grant_types": grant_types,
                "idp_initiated_login": idp_initiated_login,
                "initiate_login_uri": initiate_login_uri,
                "issuer_mode": issuer_mode,
                "jwks": jwks,
                "logo_uri": logo_uri,
                "policy_uri": policy_uri,
                "post_logout_redirect_uris": post_logout_redirect_uris,
                "redirect_uris": redirect_uris,
                "refresh_token": refresh_token,
                "response_types": response_types,
                "tos_uri": tos_uri,
                "wildcard_redirect": wildcard_redirect,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_type"]) -> 'OpenIdConnectApplicationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_uri"]) -> MetaOapg.properties.client_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consent_method"]) -> 'OpenIdConnectApplicationConsentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grant_types"]) -> MetaOapg.properties.grant_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idp_initiated_login"]) -> 'OpenIdConnectApplicationIdpInitiatedLogin': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiate_login_uri"]) -> MetaOapg.properties.initiate_login_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuer_mode"]) -> 'OpenIdConnectApplicationIssuerMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jwks"]) -> 'OpenIdConnectApplicationSettingsClientKeys': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_uri"]) -> MetaOapg.properties.logo_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_uri"]) -> MetaOapg.properties.policy_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_logout_redirect_uris"]) -> MetaOapg.properties.post_logout_redirect_uris: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirect_uris"]) -> MetaOapg.properties.redirect_uris: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_token"]) -> 'OpenIdConnectApplicationSettingsRefreshToken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response_types"]) -> MetaOapg.properties.response_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tos_uri"]) -> MetaOapg.properties.tos_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wildcard_redirect"]) -> MetaOapg.properties.wildcard_redirect: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["application_type", "client_uri", "consent_method", "grant_types", "idp_initiated_login", "initiate_login_uri", "issuer_mode", "jwks", "logo_uri", "policy_uri", "post_logout_redirect_uris", "redirect_uris", "refresh_token", "response_types", "tos_uri", "wildcard_redirect", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_type"]) -> typing.Union['OpenIdConnectApplicationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_uri"]) -> typing.Union[MetaOapg.properties.client_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consent_method"]) -> typing.Union['OpenIdConnectApplicationConsentMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grant_types"]) -> typing.Union[MetaOapg.properties.grant_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idp_initiated_login"]) -> typing.Union['OpenIdConnectApplicationIdpInitiatedLogin', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiate_login_uri"]) -> typing.Union[MetaOapg.properties.initiate_login_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuer_mode"]) -> typing.Union['OpenIdConnectApplicationIssuerMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jwks"]) -> typing.Union['OpenIdConnectApplicationSettingsClientKeys', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_uri"]) -> typing.Union[MetaOapg.properties.logo_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_uri"]) -> typing.Union[MetaOapg.properties.policy_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_logout_redirect_uris"]) -> typing.Union[MetaOapg.properties.post_logout_redirect_uris, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirect_uris"]) -> typing.Union[MetaOapg.properties.redirect_uris, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_token"]) -> typing.Union['OpenIdConnectApplicationSettingsRefreshToken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response_types"]) -> typing.Union[MetaOapg.properties.response_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tos_uri"]) -> typing.Union[MetaOapg.properties.tos_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wildcard_redirect"]) -> typing.Union[MetaOapg.properties.wildcard_redirect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["application_type", "client_uri", "consent_method", "grant_types", "idp_initiated_login", "initiate_login_uri", "issuer_mode", "jwks", "logo_uri", "policy_uri", "post_logout_redirect_uris", "redirect_uris", "refresh_token", "response_types", "tos_uri", "wildcard_redirect", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        application_type: typing.Union['OpenIdConnectApplicationType', schemas.Unset] = schemas.unset,
        client_uri: typing.Union[MetaOapg.properties.client_uri, str, schemas.Unset] = schemas.unset,
        consent_method: typing.Union['OpenIdConnectApplicationConsentMethod', schemas.Unset] = schemas.unset,
        grant_types: typing.Union[MetaOapg.properties.grant_types, list, tuple, schemas.Unset] = schemas.unset,
        idp_initiated_login: typing.Union['OpenIdConnectApplicationIdpInitiatedLogin', schemas.Unset] = schemas.unset,
        initiate_login_uri: typing.Union[MetaOapg.properties.initiate_login_uri, str, schemas.Unset] = schemas.unset,
        issuer_mode: typing.Union['OpenIdConnectApplicationIssuerMode', schemas.Unset] = schemas.unset,
        jwks: typing.Union['OpenIdConnectApplicationSettingsClientKeys', schemas.Unset] = schemas.unset,
        logo_uri: typing.Union[MetaOapg.properties.logo_uri, str, schemas.Unset] = schemas.unset,
        policy_uri: typing.Union[MetaOapg.properties.policy_uri, str, schemas.Unset] = schemas.unset,
        post_logout_redirect_uris: typing.Union[MetaOapg.properties.post_logout_redirect_uris, list, tuple, schemas.Unset] = schemas.unset,
        redirect_uris: typing.Union[MetaOapg.properties.redirect_uris, list, tuple, schemas.Unset] = schemas.unset,
        refresh_token: typing.Union['OpenIdConnectApplicationSettingsRefreshToken', schemas.Unset] = schemas.unset,
        response_types: typing.Union[MetaOapg.properties.response_types, list, tuple, schemas.Unset] = schemas.unset,
        tos_uri: typing.Union[MetaOapg.properties.tos_uri, str, schemas.Unset] = schemas.unset,
        wildcard_redirect: typing.Union[MetaOapg.properties.wildcard_redirect, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OpenIdConnectApplicationSettingsClient':
        return super().__new__(
            cls,
            *args,
            application_type=application_type,
            client_uri=client_uri,
            consent_method=consent_method,
            grant_types=grant_types,
            idp_initiated_login=idp_initiated_login,
            initiate_login_uri=initiate_login_uri,
            issuer_mode=issuer_mode,
            jwks=jwks,
            logo_uri=logo_uri,
            policy_uri=policy_uri,
            post_logout_redirect_uris=post_logout_redirect_uris,
            redirect_uris=redirect_uris,
            refresh_token=refresh_token,
            response_types=response_types,
            tos_uri=tos_uri,
            wildcard_redirect=wildcard_redirect,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.o_auth_grant_type import OAuthGrantType
from okta_python_sdk.model.o_auth_response_type import OAuthResponseType
from okta_python_sdk.model.open_id_connect_application_consent_method import OpenIdConnectApplicationConsentMethod
from okta_python_sdk.model.open_id_connect_application_idp_initiated_login import OpenIdConnectApplicationIdpInitiatedLogin
from okta_python_sdk.model.open_id_connect_application_issuer_mode import OpenIdConnectApplicationIssuerMode
from okta_python_sdk.model.open_id_connect_application_settings_client_keys import OpenIdConnectApplicationSettingsClientKeys
from okta_python_sdk.model.open_id_connect_application_settings_refresh_token import OpenIdConnectApplicationSettingsRefreshToken
from okta_python_sdk.model.open_id_connect_application_type import OpenIdConnectApplicationType
