# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class VerifyFactorRequest(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            activationToken = schemas.StrSchema
            answer = schemas.StrSchema
            attestation = schemas.StrSchema
            clientData = schemas.StrSchema
            nextPassCode = schemas.StrSchema
            passCode = schemas.StrSchema
            registrationData = schemas.StrSchema
            stateToken = schemas.StrSchema
            __annotations__ = {
                "activationToken": activationToken,
                "answer": answer,
                "attestation": attestation,
                "clientData": clientData,
                "nextPassCode": nextPassCode,
                "passCode": passCode,
                "registrationData": registrationData,
                "stateToken": stateToken,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activationToken"]) -> MetaOapg.properties.activationToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer"]) -> MetaOapg.properties.answer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attestation"]) -> MetaOapg.properties.attestation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientData"]) -> MetaOapg.properties.clientData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextPassCode"]) -> MetaOapg.properties.nextPassCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passCode"]) -> MetaOapg.properties.passCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationData"]) -> MetaOapg.properties.registrationData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateToken"]) -> MetaOapg.properties.stateToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["activationToken", "answer", "attestation", "clientData", "nextPassCode", "passCode", "registrationData", "stateToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activationToken"]) -> typing.Union[MetaOapg.properties.activationToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer"]) -> typing.Union[MetaOapg.properties.answer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attestation"]) -> typing.Union[MetaOapg.properties.attestation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientData"]) -> typing.Union[MetaOapg.properties.clientData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextPassCode"]) -> typing.Union[MetaOapg.properties.nextPassCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passCode"]) -> typing.Union[MetaOapg.properties.passCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationData"]) -> typing.Union[MetaOapg.properties.registrationData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateToken"]) -> typing.Union[MetaOapg.properties.stateToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["activationToken", "answer", "attestation", "clientData", "nextPassCode", "passCode", "registrationData", "stateToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        activationToken: typing.Union[MetaOapg.properties.activationToken, str, schemas.Unset] = schemas.unset,
        answer: typing.Union[MetaOapg.properties.answer, str, schemas.Unset] = schemas.unset,
        attestation: typing.Union[MetaOapg.properties.attestation, str, schemas.Unset] = schemas.unset,
        clientData: typing.Union[MetaOapg.properties.clientData, str, schemas.Unset] = schemas.unset,
        nextPassCode: typing.Union[MetaOapg.properties.nextPassCode, str, schemas.Unset] = schemas.unset,
        passCode: typing.Union[MetaOapg.properties.passCode, str, schemas.Unset] = schemas.unset,
        registrationData: typing.Union[MetaOapg.properties.registrationData, str, schemas.Unset] = schemas.unset,
        stateToken: typing.Union[MetaOapg.properties.stateToken, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerifyFactorRequest':
        return super().__new__(
            cls,
            *args,
            activationToken=activationToken,
            answer=answer,
            attestation=attestation,
            clientData=clientData,
            nextPassCode=nextPassCode,
            passCode=passCode,
            registrationData=registrationData,
            stateToken=stateToken,
            _configuration=_configuration,
            **kwargs,
        )
