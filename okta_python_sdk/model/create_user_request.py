# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class CreateUserRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def credentials() -> typing.Type['UserCredentials']:
                return UserCredentials
        
            @staticmethod
            def groupIds() -> typing.Type['CreateUserRequestGroupIds']:
                return CreateUserRequestGroupIds
        
            @staticmethod
            def profile() -> typing.Type['UserProfile']:
                return UserProfile
        
            @staticmethod
            def type() -> typing.Type['UserType']:
                return UserType
            __annotations__ = {
                "credentials": credentials,
                "groupIds": groupIds,
                "profile": profile,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'UserCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupIds"]) -> 'CreateUserRequestGroupIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> 'UserProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'UserType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["credentials", "groupIds", "profile", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> typing.Union['UserCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupIds"]) -> typing.Union['CreateUserRequestGroupIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union['UserProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['UserType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["credentials", "groupIds", "profile", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        credentials: typing.Union['UserCredentials', schemas.Unset] = schemas.unset,
        groupIds: typing.Union['CreateUserRequestGroupIds', schemas.Unset] = schemas.unset,
        profile: typing.Union['UserProfile', schemas.Unset] = schemas.unset,
        type: typing.Union['UserType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateUserRequest':
        return super().__new__(
            cls,
            *args,
            credentials=credentials,
            groupIds=groupIds,
            profile=profile,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.create_user_request_group_ids import CreateUserRequestGroupIds
from okta_python_sdk.model.user_credentials import UserCredentials
from okta_python_sdk.model.user_profile import UserProfile
from okta_python_sdk.model.user_type import UserType
