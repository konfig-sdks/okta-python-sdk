# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PasswordCredentialHash(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def algorithm() -> typing.Type['PasswordCredentialHashAlgorithm']:
                return PasswordCredentialHashAlgorithm
            salt = schemas.StrSchema
            saltOrder = schemas.StrSchema
            value = schemas.StrSchema
            workFactor = schemas.IntSchema
            __annotations__ = {
                "algorithm": algorithm,
                "salt": salt,
                "saltOrder": saltOrder,
                "value": value,
                "workFactor": workFactor,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["algorithm"]) -> 'PasswordCredentialHashAlgorithm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salt"]) -> MetaOapg.properties.salt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saltOrder"]) -> MetaOapg.properties.saltOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workFactor"]) -> MetaOapg.properties.workFactor: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["algorithm", "salt", "saltOrder", "value", "workFactor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["algorithm"]) -> typing.Union['PasswordCredentialHashAlgorithm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salt"]) -> typing.Union[MetaOapg.properties.salt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saltOrder"]) -> typing.Union[MetaOapg.properties.saltOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workFactor"]) -> typing.Union[MetaOapg.properties.workFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["algorithm", "salt", "saltOrder", "value", "workFactor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        algorithm: typing.Union['PasswordCredentialHashAlgorithm', schemas.Unset] = schemas.unset,
        salt: typing.Union[MetaOapg.properties.salt, str, schemas.Unset] = schemas.unset,
        saltOrder: typing.Union[MetaOapg.properties.saltOrder, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        workFactor: typing.Union[MetaOapg.properties.workFactor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordCredentialHash':
        return super().__new__(
            cls,
            *args,
            algorithm=algorithm,
            salt=salt,
            saltOrder=saltOrder,
            value=value,
            workFactor=workFactor,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.password_credential_hash_algorithm import PasswordCredentialHashAlgorithm
