# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PolicySubject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            filter = schemas.StrSchema
        
            @staticmethod
            def format() -> typing.Type['PolicySubjectFormat']:
                return PolicySubjectFormat
            matchAttribute = schemas.StrSchema
        
            @staticmethod
            def matchType() -> typing.Type['PolicySubjectMatchType']:
                return PolicySubjectMatchType
        
            @staticmethod
            def userNameTemplate() -> typing.Type['PolicyUserNameTemplate']:
                return PolicyUserNameTemplate
            __annotations__ = {
                "filter": filter,
                "format": format,
                "matchAttribute": matchAttribute,
                "matchType": matchType,
                "userNameTemplate": userNameTemplate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> MetaOapg.properties.filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> 'PolicySubjectFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchAttribute"]) -> MetaOapg.properties.matchAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchType"]) -> 'PolicySubjectMatchType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userNameTemplate"]) -> 'PolicyUserNameTemplate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filter", "format", "matchAttribute", "matchType", "userNameTemplate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union[MetaOapg.properties.filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union['PolicySubjectFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchAttribute"]) -> typing.Union[MetaOapg.properties.matchAttribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchType"]) -> typing.Union['PolicySubjectMatchType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userNameTemplate"]) -> typing.Union['PolicyUserNameTemplate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filter", "format", "matchAttribute", "matchType", "userNameTemplate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filter: typing.Union[MetaOapg.properties.filter, str, schemas.Unset] = schemas.unset,
        format: typing.Union['PolicySubjectFormat', schemas.Unset] = schemas.unset,
        matchAttribute: typing.Union[MetaOapg.properties.matchAttribute, str, schemas.Unset] = schemas.unset,
        matchType: typing.Union['PolicySubjectMatchType', schemas.Unset] = schemas.unset,
        userNameTemplate: typing.Union['PolicyUserNameTemplate', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicySubject':
        return super().__new__(
            cls,
            *args,
            filter=filter,
            format=format,
            matchAttribute=matchAttribute,
            matchType=matchType,
            userNameTemplate=userNameTemplate,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.policy_subject_format import PolicySubjectFormat
from okta_python_sdk.model.policy_subject_match_type import PolicySubjectMatchType
from okta_python_sdk.model.policy_user_name_template import PolicyUserNameTemplate
