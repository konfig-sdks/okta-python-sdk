# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PolicyRuleConditions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def app() -> typing.Type['AppAndInstancePolicyRuleCondition']:
                return AppAndInstancePolicyRuleCondition
        
            @staticmethod
            def apps() -> typing.Type['AppInstancePolicyRuleCondition']:
                return AppInstancePolicyRuleCondition
        
            @staticmethod
            def authContext() -> typing.Type['PolicyRuleAuthContextCondition']:
                return PolicyRuleAuthContextCondition
        
            @staticmethod
            def authProvider() -> typing.Type['PasswordPolicyAuthenticationProviderCondition']:
                return PasswordPolicyAuthenticationProviderCondition
        
            @staticmethod
            def beforeScheduledAction() -> typing.Type['BeforeScheduledActionPolicyRuleCondition']:
                return BeforeScheduledActionPolicyRuleCondition
        
            @staticmethod
            def clients() -> typing.Type['ClientPolicyCondition']:
                return ClientPolicyCondition
        
            @staticmethod
            def context() -> typing.Type['ContextPolicyRuleCondition']:
                return ContextPolicyRuleCondition
        
            @staticmethod
            def device() -> typing.Type['DevicePolicyRuleCondition']:
                return DevicePolicyRuleCondition
        
            @staticmethod
            def grantTypes() -> typing.Type['GrantTypePolicyRuleCondition']:
                return GrantTypePolicyRuleCondition
        
            @staticmethod
            def groups() -> typing.Type['GroupPolicyRuleCondition']:
                return GroupPolicyRuleCondition
        
            @staticmethod
            def identityProvider() -> typing.Type['IdentityProviderPolicyRuleCondition']:
                return IdentityProviderPolicyRuleCondition
        
            @staticmethod
            def mdmEnrollment() -> typing.Type['MDMEnrollmentPolicyRuleCondition']:
                return MDMEnrollmentPolicyRuleCondition
        
            @staticmethod
            def network() -> typing.Type['PolicyNetworkCondition']:
                return PolicyNetworkCondition
        
            @staticmethod
            def people() -> typing.Type['PolicyPeopleCondition']:
                return PolicyPeopleCondition
        
            @staticmethod
            def platform() -> typing.Type['PlatformPolicyRuleCondition']:
                return PlatformPolicyRuleCondition
        
            @staticmethod
            def risk() -> typing.Type['RiskPolicyRuleCondition']:
                return RiskPolicyRuleCondition
        
            @staticmethod
            def riskScore() -> typing.Type['RiskScorePolicyRuleCondition']:
                return RiskScorePolicyRuleCondition
        
            @staticmethod
            def scopes() -> typing.Type['OAuth2ScopesMediationPolicyRuleCondition']:
                return OAuth2ScopesMediationPolicyRuleCondition
        
            @staticmethod
            def userIdentifier() -> typing.Type['UserIdentifierPolicyRuleCondition']:
                return UserIdentifierPolicyRuleCondition
        
            @staticmethod
            def userStatus() -> typing.Type['UserStatusPolicyRuleCondition']:
                return UserStatusPolicyRuleCondition
        
            @staticmethod
            def users() -> typing.Type['UserPolicyRuleCondition']:
                return UserPolicyRuleCondition
            __annotations__ = {
                "app": app,
                "apps": apps,
                "authContext": authContext,
                "authProvider": authProvider,
                "beforeScheduledAction": beforeScheduledAction,
                "clients": clients,
                "context": context,
                "device": device,
                "grantTypes": grantTypes,
                "groups": groups,
                "identityProvider": identityProvider,
                "mdmEnrollment": mdmEnrollment,
                "network": network,
                "people": people,
                "platform": platform,
                "risk": risk,
                "riskScore": riskScore,
                "scopes": scopes,
                "userIdentifier": userIdentifier,
                "userStatus": userStatus,
                "users": users,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app"]) -> 'AppAndInstancePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apps"]) -> 'AppInstancePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authContext"]) -> 'PolicyRuleAuthContextCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authProvider"]) -> 'PasswordPolicyAuthenticationProviderCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beforeScheduledAction"]) -> 'BeforeScheduledActionPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients"]) -> 'ClientPolicyCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'ContextPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'DevicePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantTypes"]) -> 'GrantTypePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> 'GroupPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityProvider"]) -> 'IdentityProviderPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mdmEnrollment"]) -> 'MDMEnrollmentPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> 'PolicyNetworkCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["people"]) -> 'PolicyPeopleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> 'PlatformPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk"]) -> 'RiskPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["riskScore"]) -> 'RiskScorePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'OAuth2ScopesMediationPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userIdentifier"]) -> 'UserIdentifierPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> 'UserStatusPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> 'UserPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app", "apps", "authContext", "authProvider", "beforeScheduledAction", "clients", "context", "device", "grantTypes", "groups", "identityProvider", "mdmEnrollment", "network", "people", "platform", "risk", "riskScore", "scopes", "userIdentifier", "userStatus", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app"]) -> typing.Union['AppAndInstancePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apps"]) -> typing.Union['AppInstancePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authContext"]) -> typing.Union['PolicyRuleAuthContextCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authProvider"]) -> typing.Union['PasswordPolicyAuthenticationProviderCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beforeScheduledAction"]) -> typing.Union['BeforeScheduledActionPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union['ClientPolicyCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union['ContextPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['DevicePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantTypes"]) -> typing.Union['GrantTypePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union['GroupPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityProvider"]) -> typing.Union['IdentityProviderPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mdmEnrollment"]) -> typing.Union['MDMEnrollmentPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union['PolicyNetworkCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["people"]) -> typing.Union['PolicyPeopleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union['PlatformPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk"]) -> typing.Union['RiskPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["riskScore"]) -> typing.Union['RiskScorePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['OAuth2ScopesMediationPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userIdentifier"]) -> typing.Union['UserIdentifierPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStatus"]) -> typing.Union['UserStatusPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union['UserPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app", "apps", "authContext", "authProvider", "beforeScheduledAction", "clients", "context", "device", "grantTypes", "groups", "identityProvider", "mdmEnrollment", "network", "people", "platform", "risk", "riskScore", "scopes", "userIdentifier", "userStatus", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        app: typing.Union['AppAndInstancePolicyRuleCondition', schemas.Unset] = schemas.unset,
        apps: typing.Union['AppInstancePolicyRuleCondition', schemas.Unset] = schemas.unset,
        authContext: typing.Union['PolicyRuleAuthContextCondition', schemas.Unset] = schemas.unset,
        authProvider: typing.Union['PasswordPolicyAuthenticationProviderCondition', schemas.Unset] = schemas.unset,
        beforeScheduledAction: typing.Union['BeforeScheduledActionPolicyRuleCondition', schemas.Unset] = schemas.unset,
        clients: typing.Union['ClientPolicyCondition', schemas.Unset] = schemas.unset,
        context: typing.Union['ContextPolicyRuleCondition', schemas.Unset] = schemas.unset,
        device: typing.Union['DevicePolicyRuleCondition', schemas.Unset] = schemas.unset,
        grantTypes: typing.Union['GrantTypePolicyRuleCondition', schemas.Unset] = schemas.unset,
        groups: typing.Union['GroupPolicyRuleCondition', schemas.Unset] = schemas.unset,
        identityProvider: typing.Union['IdentityProviderPolicyRuleCondition', schemas.Unset] = schemas.unset,
        mdmEnrollment: typing.Union['MDMEnrollmentPolicyRuleCondition', schemas.Unset] = schemas.unset,
        network: typing.Union['PolicyNetworkCondition', schemas.Unset] = schemas.unset,
        people: typing.Union['PolicyPeopleCondition', schemas.Unset] = schemas.unset,
        platform: typing.Union['PlatformPolicyRuleCondition', schemas.Unset] = schemas.unset,
        risk: typing.Union['RiskPolicyRuleCondition', schemas.Unset] = schemas.unset,
        riskScore: typing.Union['RiskScorePolicyRuleCondition', schemas.Unset] = schemas.unset,
        scopes: typing.Union['OAuth2ScopesMediationPolicyRuleCondition', schemas.Unset] = schemas.unset,
        userIdentifier: typing.Union['UserIdentifierPolicyRuleCondition', schemas.Unset] = schemas.unset,
        userStatus: typing.Union['UserStatusPolicyRuleCondition', schemas.Unset] = schemas.unset,
        users: typing.Union['UserPolicyRuleCondition', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PolicyRuleConditions':
        return super().__new__(
            cls,
            *args,
            app=app,
            apps=apps,
            authContext=authContext,
            authProvider=authProvider,
            beforeScheduledAction=beforeScheduledAction,
            clients=clients,
            context=context,
            device=device,
            grantTypes=grantTypes,
            groups=groups,
            identityProvider=identityProvider,
            mdmEnrollment=mdmEnrollment,
            network=network,
            people=people,
            platform=platform,
            risk=risk,
            riskScore=riskScore,
            scopes=scopes,
            userIdentifier=userIdentifier,
            userStatus=userStatus,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.app_and_instance_policy_rule_condition import AppAndInstancePolicyRuleCondition
from okta_python_sdk.model.app_instance_policy_rule_condition import AppInstancePolicyRuleCondition
from okta_python_sdk.model.before_scheduled_action_policy_rule_condition import BeforeScheduledActionPolicyRuleCondition
from okta_python_sdk.model.client_policy_condition import ClientPolicyCondition
from okta_python_sdk.model.context_policy_rule_condition import ContextPolicyRuleCondition
from okta_python_sdk.model.device_policy_rule_condition import DevicePolicyRuleCondition
from okta_python_sdk.model.grant_type_policy_rule_condition import GrantTypePolicyRuleCondition
from okta_python_sdk.model.group_policy_rule_condition import GroupPolicyRuleCondition
from okta_python_sdk.model.identity_provider_policy_rule_condition import IdentityProviderPolicyRuleCondition
from okta_python_sdk.model.mdm_enrollment_policy_rule_condition import MDMEnrollmentPolicyRuleCondition
from okta_python_sdk.model.o_auth2_scopes_mediation_policy_rule_condition import OAuth2ScopesMediationPolicyRuleCondition
from okta_python_sdk.model.password_policy_authentication_provider_condition import PasswordPolicyAuthenticationProviderCondition
from okta_python_sdk.model.platform_policy_rule_condition import PlatformPolicyRuleCondition
from okta_python_sdk.model.policy_network_condition import PolicyNetworkCondition
from okta_python_sdk.model.policy_people_condition import PolicyPeopleCondition
from okta_python_sdk.model.policy_rule_auth_context_condition import PolicyRuleAuthContextCondition
from okta_python_sdk.model.risk_policy_rule_condition import RiskPolicyRuleCondition
from okta_python_sdk.model.risk_score_policy_rule_condition import RiskScorePolicyRuleCondition
from okta_python_sdk.model.user_identifier_policy_rule_condition import UserIdentifierPolicyRuleCondition
from okta_python_sdk.model.user_policy_rule_condition import UserPolicyRuleCondition
from okta_python_sdk.model.user_status_policy_rule_condition import UserStatusPolicyRuleCondition
