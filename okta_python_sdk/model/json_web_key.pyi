# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class JsonWebKey(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['JsonWebKeyLinks']:
                return JsonWebKeyLinks
            alg = schemas.StrSchema
            created = schemas.DateTimeSchema
            e = schemas.StrSchema
            expiresAt = schemas.DateTimeSchema
        
            @staticmethod
            def key_ops() -> typing.Type['JsonWebKeyKeyOps']:
                return JsonWebKeyKeyOps
            kid = schemas.StrSchema
            kty = schemas.StrSchema
            lastUpdated = schemas.DateTimeSchema
            n = schemas.StrSchema
            status = schemas.StrSchema
            use = schemas.StrSchema
        
            @staticmethod
            def x5c() -> typing.Type['JsonWebKeyX5C']:
                return JsonWebKeyX5C
            x5t = schemas.StrSchema
            x5t_s256 = schemas.StrSchema
            x5u = schemas.StrSchema
            __annotations__ = {
                "_links": _links,
                "alg": alg,
                "created": created,
                "e": e,
                "expiresAt": expiresAt,
                "key_ops": key_ops,
                "kid": kid,
                "kty": kty,
                "lastUpdated": lastUpdated,
                "n": n,
                "status": status,
                "use": use,
                "x5c": x5c,
                "x5t": x5t,
                "x5t#S256": x5t_s256,
                "x5u": x5u,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'JsonWebKeyLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alg"]) -> MetaOapg.properties.alg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["e"]) -> MetaOapg.properties.e: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_ops"]) -> 'JsonWebKeyKeyOps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kid"]) -> MetaOapg.properties.kid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kty"]) -> MetaOapg.properties.kty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["n"]) -> MetaOapg.properties.n: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> MetaOapg.properties.use: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x5c"]) -> 'JsonWebKeyX5C': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x5t"]) -> MetaOapg.properties.x5t: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x5t#S256"]) -> MetaOapg.properties.x5t_s256: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x5u"]) -> MetaOapg.properties.x5u: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "alg", "created", "e", "expiresAt", "key_ops", "kid", "kty", "lastUpdated", "n", "status", "use", "x5c", "x5t", "x5t#S256", "x5u", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['JsonWebKeyLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alg"]) -> typing.Union[MetaOapg.properties.alg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["e"]) -> typing.Union[MetaOapg.properties.e, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_ops"]) -> typing.Union['JsonWebKeyKeyOps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kid"]) -> typing.Union[MetaOapg.properties.kid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kty"]) -> typing.Union[MetaOapg.properties.kty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["n"]) -> typing.Union[MetaOapg.properties.n, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> typing.Union[MetaOapg.properties.use, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x5c"]) -> typing.Union['JsonWebKeyX5C', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x5t"]) -> typing.Union[MetaOapg.properties.x5t, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x5t#S256"]) -> typing.Union[MetaOapg.properties.x5t_s256, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x5u"]) -> typing.Union[MetaOapg.properties.x5u, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "alg", "created", "e", "expiresAt", "key_ops", "kid", "kty", "lastUpdated", "n", "status", "use", "x5c", "x5t", "x5t#S256", "x5u", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['JsonWebKeyLinks', schemas.Unset] = schemas.unset,
        alg: typing.Union[MetaOapg.properties.alg, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        e: typing.Union[MetaOapg.properties.e, str, schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        key_ops: typing.Union['JsonWebKeyKeyOps', schemas.Unset] = schemas.unset,
        kid: typing.Union[MetaOapg.properties.kid, str, schemas.Unset] = schemas.unset,
        kty: typing.Union[MetaOapg.properties.kty, str, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, datetime, schemas.Unset] = schemas.unset,
        n: typing.Union[MetaOapg.properties.n, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        use: typing.Union[MetaOapg.properties.use, str, schemas.Unset] = schemas.unset,
        x5c: typing.Union['JsonWebKeyX5C', schemas.Unset] = schemas.unset,
        x5t: typing.Union[MetaOapg.properties.x5t, str, schemas.Unset] = schemas.unset,
        x5u: typing.Union[MetaOapg.properties.x5u, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JsonWebKey':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            alg=alg,
            created=created,
            e=e,
            expiresAt=expiresAt,
            key_ops=key_ops,
            kid=kid,
            kty=kty,
            lastUpdated=lastUpdated,
            n=n,
            status=status,
            use=use,
            x5c=x5c,
            x5t=x5t,
            x5u=x5u,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.json_web_key_key_ops import JsonWebKeyKeyOps
from okta_python_sdk.model.json_web_key_links import JsonWebKeyLinks
from okta_python_sdk.model.json_web_key_x5_c import JsonWebKeyX5C
