# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class LogClient(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            device = schemas.StrSchema
        
            @staticmethod
            def geographicalContext() -> typing.Type['LogGeographicalContext']:
                return LogGeographicalContext
            id = schemas.StrSchema
            ipAddress = schemas.StrSchema
        
            @staticmethod
            def userAgent() -> typing.Type['LogUserAgent']:
                return LogUserAgent
            zone = schemas.StrSchema
            __annotations__ = {
                "device": device,
                "geographicalContext": geographicalContext,
                "id": id,
                "ipAddress": ipAddress,
                "userAgent": userAgent,
                "zone": zone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> MetaOapg.properties.device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geographicalContext"]) -> 'LogGeographicalContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAgent"]) -> 'LogUserAgent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone"]) -> MetaOapg.properties.zone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device", "geographicalContext", "id", "ipAddress", "userAgent", "zone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union[MetaOapg.properties.device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geographicalContext"]) -> typing.Union['LogGeographicalContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAgent"]) -> typing.Union['LogUserAgent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone"]) -> typing.Union[MetaOapg.properties.zone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device", "geographicalContext", "id", "ipAddress", "userAgent", "zone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        device: typing.Union[MetaOapg.properties.device, str, schemas.Unset] = schemas.unset,
        geographicalContext: typing.Union['LogGeographicalContext', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        userAgent: typing.Union['LogUserAgent', schemas.Unset] = schemas.unset,
        zone: typing.Union[MetaOapg.properties.zone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LogClient':
        return super().__new__(
            cls,
            *args,
            device=device,
            geographicalContext=geographicalContext,
            id=id,
            ipAddress=ipAddress,
            userAgent=userAgent,
            zone=zone,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.log_geographical_context import LogGeographicalContext
from okta_python_sdk.model.log_user_agent import LogUserAgent
