# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class UserSchemaAttribute(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def enum() -> typing.Type['UserSchemaAttributeEnum']:
                return UserSchemaAttributeEnum
            externalName = schemas.StrSchema
            externalNamespace = schemas.StrSchema
        
            @staticmethod
            def items() -> typing.Type['UserSchemaAttributeItems']:
                return UserSchemaAttributeItems
        
            @staticmethod
            def master() -> typing.Type['UserSchemaAttributeMaster']:
                return UserSchemaAttributeMaster
            maxLength = schemas.IntSchema
            minLength = schemas.IntSchema
            mutability = schemas.StrSchema
            
            
            class oneOf(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserSchemaAttributeEnum']:
                        return UserSchemaAttributeEnum
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserSchemaAttributeEnum'], typing.List['UserSchemaAttributeEnum']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oneOf':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserSchemaAttributeEnum':
                    return super().__getitem__(i)
            pattern = schemas.StrSchema
            
            
            class permissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserSchemaAttributePermission']:
                        return UserSchemaAttributePermission
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserSchemaAttributePermission'], typing.List['UserSchemaAttributePermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserSchemaAttributePermission':
                    return super().__getitem__(i)
            required = schemas.BoolSchema
        
            @staticmethod
            def scope() -> typing.Type['UserSchemaAttributeScope']:
                return UserSchemaAttributeScope
        
            @staticmethod
            def type() -> typing.Type['UserSchemaAttributeType']:
                return UserSchemaAttributeType
        
            @staticmethod
            def union() -> typing.Type['UserSchemaAttributeUnion']:
                return UserSchemaAttributeUnion
            unique = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "enum": enum,
                "externalName": externalName,
                "externalNamespace": externalNamespace,
                "items": items,
                "master": master,
                "maxLength": maxLength,
                "minLength": minLength,
                "mutability": mutability,
                "oneOf": oneOf,
                "pattern": pattern,
                "permissions": permissions,
                "required": required,
                "scope": scope,
                "type": type,
                "union": union,
                "unique": unique,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enum"]) -> 'UserSchemaAttributeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalName"]) -> MetaOapg.properties.externalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalNamespace"]) -> MetaOapg.properties.externalNamespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'UserSchemaAttributeItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["master"]) -> 'UserSchemaAttributeMaster': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLength"]) -> MetaOapg.properties.maxLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLength"]) -> MetaOapg.properties.minLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mutability"]) -> MetaOapg.properties.mutability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oneOf"]) -> MetaOapg.properties.oneOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern"]) -> MetaOapg.properties.pattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'UserSchemaAttributeScope': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'UserSchemaAttributeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["union"]) -> 'UserSchemaAttributeUnion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unique"]) -> MetaOapg.properties.unique: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "enum", "externalName", "externalNamespace", "items", "master", "maxLength", "minLength", "mutability", "oneOf", "pattern", "permissions", "required", "scope", "type", "union", "unique", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enum"]) -> typing.Union['UserSchemaAttributeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalName"]) -> typing.Union[MetaOapg.properties.externalName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalNamespace"]) -> typing.Union[MetaOapg.properties.externalNamespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['UserSchemaAttributeItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["master"]) -> typing.Union['UserSchemaAttributeMaster', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLength"]) -> typing.Union[MetaOapg.properties.maxLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLength"]) -> typing.Union[MetaOapg.properties.minLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mutability"]) -> typing.Union[MetaOapg.properties.mutability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oneOf"]) -> typing.Union[MetaOapg.properties.oneOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern"]) -> typing.Union[MetaOapg.properties.pattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union['UserSchemaAttributeScope', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['UserSchemaAttributeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["union"]) -> typing.Union['UserSchemaAttributeUnion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unique"]) -> typing.Union[MetaOapg.properties.unique, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "enum", "externalName", "externalNamespace", "items", "master", "maxLength", "minLength", "mutability", "oneOf", "pattern", "permissions", "required", "scope", "type", "union", "unique", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        enum: typing.Union['UserSchemaAttributeEnum', schemas.Unset] = schemas.unset,
        externalName: typing.Union[MetaOapg.properties.externalName, str, schemas.Unset] = schemas.unset,
        externalNamespace: typing.Union[MetaOapg.properties.externalNamespace, str, schemas.Unset] = schemas.unset,
        items: typing.Union['UserSchemaAttributeItems', schemas.Unset] = schemas.unset,
        master: typing.Union['UserSchemaAttributeMaster', schemas.Unset] = schemas.unset,
        maxLength: typing.Union[MetaOapg.properties.maxLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minLength: typing.Union[MetaOapg.properties.minLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mutability: typing.Union[MetaOapg.properties.mutability, str, schemas.Unset] = schemas.unset,
        oneOf: typing.Union[MetaOapg.properties.oneOf, list, tuple, schemas.Unset] = schemas.unset,
        pattern: typing.Union[MetaOapg.properties.pattern, str, schemas.Unset] = schemas.unset,
        permissions: typing.Union[MetaOapg.properties.permissions, list, tuple, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
        scope: typing.Union['UserSchemaAttributeScope', schemas.Unset] = schemas.unset,
        type: typing.Union['UserSchemaAttributeType', schemas.Unset] = schemas.unset,
        union: typing.Union['UserSchemaAttributeUnion', schemas.Unset] = schemas.unset,
        unique: typing.Union[MetaOapg.properties.unique, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserSchemaAttribute':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            enum=enum,
            externalName=externalName,
            externalNamespace=externalNamespace,
            items=items,
            master=master,
            maxLength=maxLength,
            minLength=minLength,
            mutability=mutability,
            oneOf=oneOf,
            pattern=pattern,
            permissions=permissions,
            required=required,
            scope=scope,
            type=type,
            union=union,
            unique=unique,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.user_schema_attribute_enum import UserSchemaAttributeEnum
from okta_python_sdk.model.user_schema_attribute_items import UserSchemaAttributeItems
from okta_python_sdk.model.user_schema_attribute_master import UserSchemaAttributeMaster
from okta_python_sdk.model.user_schema_attribute_permission import UserSchemaAttributePermission
from okta_python_sdk.model.user_schema_attribute_scope import UserSchemaAttributeScope
from okta_python_sdk.model.user_schema_attribute_type import UserSchemaAttributeType
from okta_python_sdk.model.user_schema_attribute_union import UserSchemaAttributeUnion
