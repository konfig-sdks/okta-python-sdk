# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class NetworkZone(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['NetworkZoneLinks']:
                return NetworkZoneLinks
        
            @staticmethod
            def asns() -> typing.Type['NetworkZoneAsns']:
                return NetworkZoneAsns
            created = schemas.DateTimeSchema
            
            
            class gateways(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetworkZoneAddress']:
                        return NetworkZoneAddress
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NetworkZoneAddress'], typing.List['NetworkZoneAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gateways':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetworkZoneAddress':
                    return super().__getitem__(i)
            id = schemas.StrSchema
            lastUpdated = schemas.DateTimeSchema
            
            
            class locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetworkZoneLocation']:
                        return NetworkZoneLocation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NetworkZoneLocation'], typing.List['NetworkZoneLocation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetworkZoneLocation':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            
            
            class proxies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NetworkZoneAddress']:
                        return NetworkZoneAddress
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NetworkZoneAddress'], typing.List['NetworkZoneAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'proxies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NetworkZoneAddress':
                    return super().__getitem__(i)
            proxyType = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['NetworkZoneStatus']:
                return NetworkZoneStatus
            system = schemas.BoolSchema
        
            @staticmethod
            def type() -> typing.Type['NetworkZoneType']:
                return NetworkZoneType
        
            @staticmethod
            def usage() -> typing.Type['NetworkZoneUsage']:
                return NetworkZoneUsage
            __annotations__ = {
                "_links": _links,
                "asns": asns,
                "created": created,
                "gateways": gateways,
                "id": id,
                "lastUpdated": lastUpdated,
                "locations": locations,
                "name": name,
                "proxies": proxies,
                "proxyType": proxyType,
                "status": status,
                "system": system,
                "type": type,
                "usage": usage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'NetworkZoneLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asns"]) -> 'NetworkZoneAsns': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateways"]) -> MetaOapg.properties.gateways: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxies"]) -> MetaOapg.properties.proxies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxyType"]) -> MetaOapg.properties.proxyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'NetworkZoneStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'NetworkZoneType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'NetworkZoneUsage': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "asns", "created", "gateways", "id", "lastUpdated", "locations", "name", "proxies", "proxyType", "status", "system", "type", "usage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['NetworkZoneLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asns"]) -> typing.Union['NetworkZoneAsns', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateways"]) -> typing.Union[MetaOapg.properties.gateways, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union[MetaOapg.properties.locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxies"]) -> typing.Union[MetaOapg.properties.proxies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxyType"]) -> typing.Union[MetaOapg.properties.proxyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['NetworkZoneStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['NetworkZoneType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['NetworkZoneUsage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "asns", "created", "gateways", "id", "lastUpdated", "locations", "name", "proxies", "proxyType", "status", "system", "type", "usage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['NetworkZoneLinks', schemas.Unset] = schemas.unset,
        asns: typing.Union['NetworkZoneAsns', schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        gateways: typing.Union[MetaOapg.properties.gateways, list, tuple, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, datetime, schemas.Unset] = schemas.unset,
        locations: typing.Union[MetaOapg.properties.locations, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        proxies: typing.Union[MetaOapg.properties.proxies, list, tuple, schemas.Unset] = schemas.unset,
        proxyType: typing.Union[MetaOapg.properties.proxyType, str, schemas.Unset] = schemas.unset,
        status: typing.Union['NetworkZoneStatus', schemas.Unset] = schemas.unset,
        system: typing.Union[MetaOapg.properties.system, bool, schemas.Unset] = schemas.unset,
        type: typing.Union['NetworkZoneType', schemas.Unset] = schemas.unset,
        usage: typing.Union['NetworkZoneUsage', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkZone':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            asns=asns,
            created=created,
            gateways=gateways,
            id=id,
            lastUpdated=lastUpdated,
            locations=locations,
            name=name,
            proxies=proxies,
            proxyType=proxyType,
            status=status,
            system=system,
            type=type,
            usage=usage,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.network_zone_address import NetworkZoneAddress
from okta_python_sdk.model.network_zone_asns import NetworkZoneAsns
from okta_python_sdk.model.network_zone_links import NetworkZoneLinks
from okta_python_sdk.model.network_zone_location import NetworkZoneLocation
from okta_python_sdk.model.network_zone_status import NetworkZoneStatus
from okta_python_sdk.model.network_zone_type import NetworkZoneType
from okta_python_sdk.model.network_zone_usage import NetworkZoneUsage
