# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _embedded() -> typing.Type['UserEmbedded']:
                return UserEmbedded
        
            @staticmethod
            def _links() -> typing.Type['UserLinks']:
                return UserLinks
            activated = schemas.DateTimeSchema
            created = schemas.DateTimeSchema
        
            @staticmethod
            def credentials() -> typing.Type['UserCredentials']:
                return UserCredentials
            id = schemas.StrSchema
            lastLogin = schemas.DateTimeSchema
            lastUpdated = schemas.DateTimeSchema
            passwordChanged = schemas.DateTimeSchema
        
            @staticmethod
            def profile() -> typing.Type['UserProfile']:
                return UserProfile
        
            @staticmethod
            def status() -> typing.Type['UserStatus']:
                return UserStatus
            statusChanged = schemas.DateTimeSchema
        
            @staticmethod
            def transitioningToStatus() -> typing.Type['UserStatus']:
                return UserStatus
        
            @staticmethod
            def type() -> typing.Type['UserType']:
                return UserType
            __annotations__ = {
                "_embedded": _embedded,
                "_links": _links,
                "activated": activated,
                "created": created,
                "credentials": credentials,
                "id": id,
                "lastLogin": lastLogin,
                "lastUpdated": lastUpdated,
                "passwordChanged": passwordChanged,
                "profile": profile,
                "status": status,
                "statusChanged": statusChanged,
                "transitioningToStatus": transitioningToStatus,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_embedded"]) -> 'UserEmbedded': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'UserLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activated"]) -> MetaOapg.properties.activated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'UserCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastLogin"]) -> MetaOapg.properties.lastLogin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordChanged"]) -> MetaOapg.properties.passwordChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> 'UserProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'UserStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusChanged"]) -> MetaOapg.properties.statusChanged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitioningToStatus"]) -> 'UserStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'UserType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_embedded", "_links", "activated", "created", "credentials", "id", "lastLogin", "lastUpdated", "passwordChanged", "profile", "status", "statusChanged", "transitioningToStatus", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_embedded"]) -> typing.Union['UserEmbedded', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['UserLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activated"]) -> typing.Union[MetaOapg.properties.activated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> typing.Union['UserCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastLogin"]) -> typing.Union[MetaOapg.properties.lastLogin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordChanged"]) -> typing.Union[MetaOapg.properties.passwordChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union['UserProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['UserStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusChanged"]) -> typing.Union[MetaOapg.properties.statusChanged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitioningToStatus"]) -> typing.Union['UserStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['UserType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_embedded", "_links", "activated", "created", "credentials", "id", "lastLogin", "lastUpdated", "passwordChanged", "profile", "status", "statusChanged", "transitioningToStatus", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _embedded: typing.Union['UserEmbedded', schemas.Unset] = schemas.unset,
        _links: typing.Union['UserLinks', schemas.Unset] = schemas.unset,
        activated: typing.Union[MetaOapg.properties.activated, str, datetime, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        credentials: typing.Union['UserCredentials', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lastLogin: typing.Union[MetaOapg.properties.lastLogin, str, datetime, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, datetime, schemas.Unset] = schemas.unset,
        passwordChanged: typing.Union[MetaOapg.properties.passwordChanged, str, datetime, schemas.Unset] = schemas.unset,
        profile: typing.Union['UserProfile', schemas.Unset] = schemas.unset,
        status: typing.Union['UserStatus', schemas.Unset] = schemas.unset,
        statusChanged: typing.Union[MetaOapg.properties.statusChanged, str, datetime, schemas.Unset] = schemas.unset,
        transitioningToStatus: typing.Union['UserStatus', schemas.Unset] = schemas.unset,
        type: typing.Union['UserType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            _embedded=_embedded,
            _links=_links,
            activated=activated,
            created=created,
            credentials=credentials,
            id=id,
            lastLogin=lastLogin,
            lastUpdated=lastUpdated,
            passwordChanged=passwordChanged,
            profile=profile,
            status=status,
            statusChanged=statusChanged,
            transitioningToStatus=transitioningToStatus,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.user_credentials import UserCredentials
from okta_python_sdk.model.user_embedded import UserEmbedded
from okta_python_sdk.model.user_links import UserLinks
from okta_python_sdk.model.user_profile import UserProfile
from okta_python_sdk.model.user_status import UserStatus
from okta_python_sdk.model.user_type import UserType
