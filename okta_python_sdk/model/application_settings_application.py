# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class ApplicationSettingsApplication(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            acsUrl = schemas.StrSchema
            buttonField = schemas.StrSchema
            loginUrlRegex = schemas.StrSchema
            orgName = schemas.StrSchema
            passwordField = schemas.StrSchema
            url = schemas.StrSchema
            usernameField = schemas.StrSchema
            __annotations__ = {
                "acsUrl": acsUrl,
                "buttonField": buttonField,
                "loginUrlRegex": loginUrlRegex,
                "orgName": orgName,
                "passwordField": passwordField,
                "url": url,
                "usernameField": usernameField,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acsUrl"]) -> MetaOapg.properties.acsUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttonField"]) -> MetaOapg.properties.buttonField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loginUrlRegex"]) -> MetaOapg.properties.loginUrlRegex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordField"]) -> MetaOapg.properties.passwordField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernameField"]) -> MetaOapg.properties.usernameField: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acsUrl", "buttonField", "loginUrlRegex", "orgName", "passwordField", "url", "usernameField", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acsUrl"]) -> typing.Union[MetaOapg.properties.acsUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttonField"]) -> typing.Union[MetaOapg.properties.buttonField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loginUrlRegex"]) -> typing.Union[MetaOapg.properties.loginUrlRegex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgName"]) -> typing.Union[MetaOapg.properties.orgName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordField"]) -> typing.Union[MetaOapg.properties.passwordField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernameField"]) -> typing.Union[MetaOapg.properties.usernameField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acsUrl", "buttonField", "loginUrlRegex", "orgName", "passwordField", "url", "usernameField", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        acsUrl: typing.Union[MetaOapg.properties.acsUrl, str, schemas.Unset] = schemas.unset,
        buttonField: typing.Union[MetaOapg.properties.buttonField, str, schemas.Unset] = schemas.unset,
        loginUrlRegex: typing.Union[MetaOapg.properties.loginUrlRegex, str, schemas.Unset] = schemas.unset,
        orgName: typing.Union[MetaOapg.properties.orgName, str, schemas.Unset] = schemas.unset,
        passwordField: typing.Union[MetaOapg.properties.passwordField, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        usernameField: typing.Union[MetaOapg.properties.usernameField, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicationSettingsApplication':
        return super().__new__(
            cls,
            *args,
            acsUrl=acsUrl,
            buttonField=buttonField,
            loginUrlRegex=loginUrlRegex,
            orgName=orgName,
            passwordField=passwordField,
            url=url,
            usernameField=usernameField,
            _configuration=_configuration,
            **kwargs,
        )
