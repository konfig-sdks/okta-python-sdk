# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class AuthorizationServerPolicyRuleConditions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def clients() -> typing.Type['ClientPolicyCondition']:
                return ClientPolicyCondition
        
            @staticmethod
            def grantTypes() -> typing.Type['GrantTypePolicyRuleCondition']:
                return GrantTypePolicyRuleCondition
        
            @staticmethod
            def people() -> typing.Type['PolicyPeopleCondition']:
                return PolicyPeopleCondition
        
            @staticmethod
            def scopes() -> typing.Type['OAuth2ScopesMediationPolicyRuleCondition']:
                return OAuth2ScopesMediationPolicyRuleCondition
            __annotations__ = {
                "clients": clients,
                "grantTypes": grantTypes,
                "people": people,
                "scopes": scopes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients"]) -> 'ClientPolicyCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grantTypes"]) -> 'GrantTypePolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["people"]) -> 'PolicyPeopleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'OAuth2ScopesMediationPolicyRuleCondition': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clients", "grantTypes", "people", "scopes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union['ClientPolicyCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grantTypes"]) -> typing.Union['GrantTypePolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["people"]) -> typing.Union['PolicyPeopleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['OAuth2ScopesMediationPolicyRuleCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clients", "grantTypes", "people", "scopes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clients: typing.Union['ClientPolicyCondition', schemas.Unset] = schemas.unset,
        grantTypes: typing.Union['GrantTypePolicyRuleCondition', schemas.Unset] = schemas.unset,
        people: typing.Union['PolicyPeopleCondition', schemas.Unset] = schemas.unset,
        scopes: typing.Union['OAuth2ScopesMediationPolicyRuleCondition', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthorizationServerPolicyRuleConditions':
        return super().__new__(
            cls,
            *args,
            clients=clients,
            grantTypes=grantTypes,
            people=people,
            scopes=scopes,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.client_policy_condition import ClientPolicyCondition
from okta_python_sdk.model.grant_type_policy_rule_condition import GrantTypePolicyRuleCondition
from okta_python_sdk.model.o_auth2_scopes_mediation_policy_rule_condition import OAuth2ScopesMediationPolicyRuleCondition
from okta_python_sdk.model.policy_people_condition import PolicyPeopleCondition
