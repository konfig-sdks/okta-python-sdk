# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class VerifyUserFactorResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _embedded() -> typing.Type['VerifyUserFactorResponseEmbedded']:
                return VerifyUserFactorResponseEmbedded
        
            @staticmethod
            def _links() -> typing.Type['VerifyUserFactorResponseLinks']:
                return VerifyUserFactorResponseLinks
            expiresAt = schemas.DateTimeSchema
            
            
            class factorResult(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "EXPIRED": "EXPIRED",
                        "CHALLENGE": "CHALLENGE",
                        "WAITING": "WAITING",
                        "FAILED": "FAILED",
                        "REJECTED": "REJECTED",
                        "TIMEOUT": "TIMEOUT",
                        "TIME_WINDOW_EXCEEDED": "TIME_WINDOW_EXCEEDED",
                        "PASSCODE_REPLAYED": "PASSCODE_REPLAYED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def EXPIRED(cls):
                    return cls("EXPIRED")
                
                @schemas.classproperty
                def CHALLENGE(cls):
                    return cls("CHALLENGE")
                
                @schemas.classproperty
                def WAITING(cls):
                    return cls("WAITING")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
                
                @schemas.classproperty
                def TIMEOUT(cls):
                    return cls("TIMEOUT")
                
                @schemas.classproperty
                def TIME_WINDOW_EXCEEDED(cls):
                    return cls("TIME_WINDOW_EXCEEDED")
                
                @schemas.classproperty
                def PASSCODE_REPLAYED(cls):
                    return cls("PASSCODE_REPLAYED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            factorResultMessage = schemas.StrSchema
            __annotations__ = {
                "_embedded": _embedded,
                "_links": _links,
                "expiresAt": expiresAt,
                "factorResult": factorResult,
                "factorResultMessage": factorResultMessage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_embedded"]) -> 'VerifyUserFactorResponseEmbedded': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'VerifyUserFactorResponseLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factorResult"]) -> MetaOapg.properties.factorResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factorResultMessage"]) -> MetaOapg.properties.factorResultMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_embedded", "_links", "expiresAt", "factorResult", "factorResultMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_embedded"]) -> typing.Union['VerifyUserFactorResponseEmbedded', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['VerifyUserFactorResponseLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factorResult"]) -> typing.Union[MetaOapg.properties.factorResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factorResultMessage"]) -> typing.Union[MetaOapg.properties.factorResultMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_embedded", "_links", "expiresAt", "factorResult", "factorResultMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _embedded: typing.Union['VerifyUserFactorResponseEmbedded', schemas.Unset] = schemas.unset,
        _links: typing.Union['VerifyUserFactorResponseLinks', schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        factorResult: typing.Union[MetaOapg.properties.factorResult, str, schemas.Unset] = schemas.unset,
        factorResultMessage: typing.Union[MetaOapg.properties.factorResultMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerifyUserFactorResponse':
        return super().__new__(
            cls,
            *args,
            _embedded=_embedded,
            _links=_links,
            expiresAt=expiresAt,
            factorResult=factorResult,
            factorResultMessage=factorResultMessage,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.verify_user_factor_response_embedded import VerifyUserFactorResponseEmbedded
from okta_python_sdk.model.verify_user_factor_response_links import VerifyUserFactorResponseLinks
