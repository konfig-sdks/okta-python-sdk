# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class AuthorizationServerCredentialsSigningConfig(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            kid = schemas.StrSchema
            lastRotated = schemas.DateTimeSchema
            nextRotation = schemas.DateTimeSchema
        
            @staticmethod
            def rotationMode() -> typing.Type['AuthorizationServerCredentialsRotationMode']:
                return AuthorizationServerCredentialsRotationMode
        
            @staticmethod
            def use() -> typing.Type['AuthorizationServerCredentialsUse']:
                return AuthorizationServerCredentialsUse
            __annotations__ = {
                "kid": kid,
                "lastRotated": lastRotated,
                "nextRotation": nextRotation,
                "rotationMode": rotationMode,
                "use": use,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kid"]) -> MetaOapg.properties.kid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRotated"]) -> MetaOapg.properties.lastRotated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextRotation"]) -> MetaOapg.properties.nextRotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotationMode"]) -> 'AuthorizationServerCredentialsRotationMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use"]) -> 'AuthorizationServerCredentialsUse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kid", "lastRotated", "nextRotation", "rotationMode", "use", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kid"]) -> typing.Union[MetaOapg.properties.kid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRotated"]) -> typing.Union[MetaOapg.properties.lastRotated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextRotation"]) -> typing.Union[MetaOapg.properties.nextRotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotationMode"]) -> typing.Union['AuthorizationServerCredentialsRotationMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use"]) -> typing.Union['AuthorizationServerCredentialsUse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kid", "lastRotated", "nextRotation", "rotationMode", "use", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kid: typing.Union[MetaOapg.properties.kid, str, schemas.Unset] = schemas.unset,
        lastRotated: typing.Union[MetaOapg.properties.lastRotated, str, datetime, schemas.Unset] = schemas.unset,
        nextRotation: typing.Union[MetaOapg.properties.nextRotation, str, datetime, schemas.Unset] = schemas.unset,
        rotationMode: typing.Union['AuthorizationServerCredentialsRotationMode', schemas.Unset] = schemas.unset,
        use: typing.Union['AuthorizationServerCredentialsUse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthorizationServerCredentialsSigningConfig':
        return super().__new__(
            cls,
            *args,
            kid=kid,
            lastRotated=lastRotated,
            nextRotation=nextRotation,
            rotationMode=rotationMode,
            use=use,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.authorization_server_credentials_rotation_mode import AuthorizationServerCredentialsRotationMode
from okta_python_sdk.model.authorization_server_credentials_use import AuthorizationServerCredentialsUse
