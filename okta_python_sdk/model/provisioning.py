# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class Provisioning(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AUTO": "AUTO",
                        "CALLOUT": "CALLOUT",
                        "DISABLED": "DISABLED",
                    }
                
                @schemas.classproperty
                def AUTO(cls):
                    return cls("AUTO")
                
                @schemas.classproperty
                def CALLOUT(cls):
                    return cls("CALLOUT")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
        
            @staticmethod
            def conditions() -> typing.Type['ProvisioningConditions']:
                return ProvisioningConditions
        
            @staticmethod
            def groups() -> typing.Type['ProvisioningGroups']:
                return ProvisioningGroups
            profileMaster = schemas.BoolSchema
            __annotations__ = {
                "action": action,
                "conditions": conditions,
                "groups": groups,
                "profileMaster": profileMaster,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> 'ProvisioningConditions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> 'ProvisioningGroups': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileMaster"]) -> MetaOapg.properties.profileMaster: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "conditions", "groups", "profileMaster", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union[MetaOapg.properties.action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union['ProvisioningConditions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union['ProvisioningGroups', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileMaster"]) -> typing.Union[MetaOapg.properties.profileMaster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "conditions", "groups", "profileMaster", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        action: typing.Union[MetaOapg.properties.action, str, schemas.Unset] = schemas.unset,
        conditions: typing.Union['ProvisioningConditions', schemas.Unset] = schemas.unset,
        groups: typing.Union['ProvisioningGroups', schemas.Unset] = schemas.unset,
        profileMaster: typing.Union[MetaOapg.properties.profileMaster, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Provisioning':
        return super().__new__(
            cls,
            *args,
            action=action,
            conditions=conditions,
            groups=groups,
            profileMaster=profileMaster,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.provisioning_conditions import ProvisioningConditions
from okta_python_sdk.model.provisioning_groups import ProvisioningGroups
