# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PushUserFactorProfile(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            credentialId = schemas.StrSchema
            deviceToken = schemas.StrSchema
            deviceType = schemas.StrSchema
            name = schemas.StrSchema
            platform = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "credentialId": credentialId,
                "deviceToken": deviceToken,
                "deviceType": deviceType,
                "name": name,
                "platform": platform,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialId"]) -> MetaOapg.properties.credentialId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceToken"]) -> MetaOapg.properties.deviceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceType"]) -> MetaOapg.properties.deviceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "credentialId", "deviceToken", "deviceType", "name", "platform", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialId"]) -> typing.Union[MetaOapg.properties.credentialId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceToken"]) -> typing.Union[MetaOapg.properties.deviceToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceType"]) -> typing.Union[MetaOapg.properties.deviceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "credentialId", "deviceToken", "deviceType", "name", "platform", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        credentialId: typing.Union[MetaOapg.properties.credentialId, str, schemas.Unset] = schemas.unset,
        deviceToken: typing.Union[MetaOapg.properties.deviceToken, str, schemas.Unset] = schemas.unset,
        deviceType: typing.Union[MetaOapg.properties.deviceType, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PushUserFactorProfile':
        return super().__new__(
            cls,
            *args,
            version=version,
            credentialId=credentialId,
            deviceToken=deviceToken,
            deviceType=deviceType,
            name=name,
            platform=platform,
            _configuration=_configuration,
            **kwargs,
        )
