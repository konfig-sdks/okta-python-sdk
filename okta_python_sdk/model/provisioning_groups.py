# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class ProvisioningGroups(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NONE": "NONE",
                        "APPEND": "APPEND",
                        "SYNC": "SYNC",
                        "ASSIGN": "ASSIGN",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def APPEND(cls):
                    return cls("APPEND")
                
                @schemas.classproperty
                def SYNC(cls):
                    return cls("SYNC")
                
                @schemas.classproperty
                def ASSIGN(cls):
                    return cls("ASSIGN")
        
            @staticmethod
            def assignments() -> typing.Type['ProvisioningGroupsAssignments']:
                return ProvisioningGroupsAssignments
        
            @staticmethod
            def filter() -> typing.Type['ProvisioningGroupsFilter']:
                return ProvisioningGroupsFilter
            sourceAttributeName = schemas.StrSchema
            __annotations__ = {
                "action": action,
                "assignments": assignments,
                "filter": filter,
                "sourceAttributeName": sourceAttributeName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignments"]) -> 'ProvisioningGroupsAssignments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'ProvisioningGroupsFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceAttributeName"]) -> MetaOapg.properties.sourceAttributeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "assignments", "filter", "sourceAttributeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union[MetaOapg.properties.action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignments"]) -> typing.Union['ProvisioningGroupsAssignments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union['ProvisioningGroupsFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceAttributeName"]) -> typing.Union[MetaOapg.properties.sourceAttributeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "assignments", "filter", "sourceAttributeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        action: typing.Union[MetaOapg.properties.action, str, schemas.Unset] = schemas.unset,
        assignments: typing.Union['ProvisioningGroupsAssignments', schemas.Unset] = schemas.unset,
        filter: typing.Union['ProvisioningGroupsFilter', schemas.Unset] = schemas.unset,
        sourceAttributeName: typing.Union[MetaOapg.properties.sourceAttributeName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProvisioningGroups':
        return super().__new__(
            cls,
            *args,
            action=action,
            assignments=assignments,
            filter=filter,
            sourceAttributeName=sourceAttributeName,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.provisioning_groups_assignments import ProvisioningGroupsAssignments
from okta_python_sdk.model.provisioning_groups_filter import ProvisioningGroupsFilter
