# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class PasswordPolicyRecoveryFactors(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def okta_call() -> typing.Type['PasswordPolicyRecoveryFactorSettings']:
                return PasswordPolicyRecoveryFactorSettings
        
            @staticmethod
            def okta_email() -> typing.Type['PasswordPolicyRecoveryEmail']:
                return PasswordPolicyRecoveryEmail
        
            @staticmethod
            def okta_sms() -> typing.Type['PasswordPolicyRecoveryFactorSettings']:
                return PasswordPolicyRecoveryFactorSettings
        
            @staticmethod
            def recovery_question() -> typing.Type['PasswordPolicyRecoveryQuestion']:
                return PasswordPolicyRecoveryQuestion
            __annotations__ = {
                "okta_call": okta_call,
                "okta_email": okta_email,
                "okta_sms": okta_sms,
                "recovery_question": recovery_question,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["okta_call"]) -> 'PasswordPolicyRecoveryFactorSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["okta_email"]) -> 'PasswordPolicyRecoveryEmail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["okta_sms"]) -> 'PasswordPolicyRecoveryFactorSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recovery_question"]) -> 'PasswordPolicyRecoveryQuestion': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["okta_call", "okta_email", "okta_sms", "recovery_question", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["okta_call"]) -> typing.Union['PasswordPolicyRecoveryFactorSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["okta_email"]) -> typing.Union['PasswordPolicyRecoveryEmail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["okta_sms"]) -> typing.Union['PasswordPolicyRecoveryFactorSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recovery_question"]) -> typing.Union['PasswordPolicyRecoveryQuestion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["okta_call", "okta_email", "okta_sms", "recovery_question", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        okta_call: typing.Union['PasswordPolicyRecoveryFactorSettings', schemas.Unset] = schemas.unset,
        okta_email: typing.Union['PasswordPolicyRecoveryEmail', schemas.Unset] = schemas.unset,
        okta_sms: typing.Union['PasswordPolicyRecoveryFactorSettings', schemas.Unset] = schemas.unset,
        recovery_question: typing.Union['PasswordPolicyRecoveryQuestion', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordPolicyRecoveryFactors':
        return super().__new__(
            cls,
            *args,
            okta_call=okta_call,
            okta_email=okta_email,
            okta_sms=okta_sms,
            recovery_question=recovery_question,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.password_policy_recovery_email import PasswordPolicyRecoveryEmail
from okta_python_sdk.model.password_policy_recovery_factor_settings import PasswordPolicyRecoveryFactorSettings
from okta_python_sdk.model.password_policy_recovery_question import PasswordPolicyRecoveryQuestion
