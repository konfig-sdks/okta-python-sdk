# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class LogAuthenticationContext(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def authenticationProvider() -> typing.Type['LogAuthenticationProvider']:
                return LogAuthenticationProvider
            authenticationStep = schemas.IntSchema
        
            @staticmethod
            def credentialProvider() -> typing.Type['LogCredentialProvider']:
                return LogCredentialProvider
        
            @staticmethod
            def credentialType() -> typing.Type['LogCredentialType']:
                return LogCredentialType
            externalSessionId = schemas.StrSchema
            interface = schemas.StrSchema
        
            @staticmethod
            def issuer() -> typing.Type['LogIssuer']:
                return LogIssuer
            __annotations__ = {
                "authenticationProvider": authenticationProvider,
                "authenticationStep": authenticationStep,
                "credentialProvider": credentialProvider,
                "credentialType": credentialType,
                "externalSessionId": externalSessionId,
                "interface": interface,
                "issuer": issuer,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationProvider"]) -> 'LogAuthenticationProvider': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationStep"]) -> MetaOapg.properties.authenticationStep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialProvider"]) -> 'LogCredentialProvider': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentialType"]) -> 'LogCredentialType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSessionId"]) -> MetaOapg.properties.externalSessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interface"]) -> MetaOapg.properties.interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuer"]) -> 'LogIssuer': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authenticationProvider", "authenticationStep", "credentialProvider", "credentialType", "externalSessionId", "interface", "issuer", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationProvider"]) -> typing.Union['LogAuthenticationProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationStep"]) -> typing.Union[MetaOapg.properties.authenticationStep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialProvider"]) -> typing.Union['LogCredentialProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentialType"]) -> typing.Union['LogCredentialType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSessionId"]) -> typing.Union[MetaOapg.properties.externalSessionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interface"]) -> typing.Union[MetaOapg.properties.interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuer"]) -> typing.Union['LogIssuer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authenticationProvider", "authenticationStep", "credentialProvider", "credentialType", "externalSessionId", "interface", "issuer", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        authenticationProvider: typing.Union['LogAuthenticationProvider', schemas.Unset] = schemas.unset,
        authenticationStep: typing.Union[MetaOapg.properties.authenticationStep, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        credentialProvider: typing.Union['LogCredentialProvider', schemas.Unset] = schemas.unset,
        credentialType: typing.Union['LogCredentialType', schemas.Unset] = schemas.unset,
        externalSessionId: typing.Union[MetaOapg.properties.externalSessionId, str, schemas.Unset] = schemas.unset,
        interface: typing.Union[MetaOapg.properties.interface, str, schemas.Unset] = schemas.unset,
        issuer: typing.Union['LogIssuer', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LogAuthenticationContext':
        return super().__new__(
            cls,
            *args,
            authenticationProvider=authenticationProvider,
            authenticationStep=authenticationStep,
            credentialProvider=credentialProvider,
            credentialType=credentialType,
            externalSessionId=externalSessionId,
            interface=interface,
            issuer=issuer,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.log_authentication_provider import LogAuthenticationProvider
from okta_python_sdk.model.log_credential_provider import LogCredentialProvider
from okta_python_sdk.model.log_credential_type import LogCredentialType
from okta_python_sdk.model.log_issuer import LogIssuer
