# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class MultifactorEnrollmentPolicyAuthenticatorSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def constraints() -> typing.Type['MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints']:
                return MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints
        
            @staticmethod
            def enroll() -> typing.Type['MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll']:
                return MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll
        
            @staticmethod
            def key() -> typing.Type['MultifactorEnrollmentPolicyAuthenticatorType']:
                return MultifactorEnrollmentPolicyAuthenticatorType
            __annotations__ = {
                "constraints": constraints,
                "enroll": enroll,
                "key": key,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["constraints"]) -> 'MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enroll"]) -> 'MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> 'MultifactorEnrollmentPolicyAuthenticatorType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["constraints", "enroll", "key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["constraints"]) -> typing.Union['MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enroll"]) -> typing.Union['MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union['MultifactorEnrollmentPolicyAuthenticatorType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["constraints", "enroll", "key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        constraints: typing.Union['MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints', schemas.Unset] = schemas.unset,
        enroll: typing.Union['MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll', schemas.Unset] = schemas.unset,
        key: typing.Union['MultifactorEnrollmentPolicyAuthenticatorType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MultifactorEnrollmentPolicyAuthenticatorSettings':
        return super().__new__(
            cls,
            *args,
            constraints=constraints,
            enroll=enroll,
            key=key,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.multifactor_enrollment_policy_authenticator_settings_constraints import MultifactorEnrollmentPolicyAuthenticatorSettingsConstraints
from okta_python_sdk.model.multifactor_enrollment_policy_authenticator_settings_enroll import MultifactorEnrollmentPolicyAuthenticatorSettingsEnroll
from okta_python_sdk.model.multifactor_enrollment_policy_authenticator_type import MultifactorEnrollmentPolicyAuthenticatorType
