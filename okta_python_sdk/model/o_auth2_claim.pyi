# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class OAuth2Claim(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['OAuth2ClaimLinks']:
                return OAuth2ClaimLinks
            alwaysIncludeInToken = schemas.BoolSchema
            
            
            class claimType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IDENTITY(cls):
                    return cls("IDENTITY")
                
                @schemas.classproperty
                def RESOURCE(cls):
                    return cls("RESOURCE")
        
            @staticmethod
            def conditions() -> typing.Type['OAuth2ClaimConditions']:
                return OAuth2ClaimConditions
            
            
            class group_filter_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STARTS_WITH(cls):
                    return cls("STARTS_WITH")
                
                @schemas.classproperty
                def EQUALS(cls):
                    return cls("EQUALS")
                
                @schemas.classproperty
                def CONTAINS(cls):
                    return cls("CONTAINS")
                
                @schemas.classproperty
                def REGEX(cls):
                    return cls("REGEX")
            id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
            system = schemas.BoolSchema
            value = schemas.StrSchema
            
            
            class valueType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EXPRESSION(cls):
                    return cls("EXPRESSION")
                
                @schemas.classproperty
                def GROUPS(cls):
                    return cls("GROUPS")
                
                @schemas.classproperty
                def SYSTEM(cls):
                    return cls("SYSTEM")
            __annotations__ = {
                "_links": _links,
                "alwaysIncludeInToken": alwaysIncludeInToken,
                "claimType": claimType,
                "conditions": conditions,
                "group_filter_type": group_filter_type,
                "id": id,
                "name": name,
                "status": status,
                "system": system,
                "value": value,
                "valueType": valueType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'OAuth2ClaimLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alwaysIncludeInToken"]) -> MetaOapg.properties.alwaysIncludeInToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claimType"]) -> MetaOapg.properties.claimType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> 'OAuth2ClaimConditions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_filter_type"]) -> MetaOapg.properties.group_filter_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valueType"]) -> MetaOapg.properties.valueType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "alwaysIncludeInToken", "claimType", "conditions", "group_filter_type", "id", "name", "status", "system", "value", "valueType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['OAuth2ClaimLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alwaysIncludeInToken"]) -> typing.Union[MetaOapg.properties.alwaysIncludeInToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claimType"]) -> typing.Union[MetaOapg.properties.claimType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union['OAuth2ClaimConditions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_filter_type"]) -> typing.Union[MetaOapg.properties.group_filter_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union[MetaOapg.properties.system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valueType"]) -> typing.Union[MetaOapg.properties.valueType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "alwaysIncludeInToken", "claimType", "conditions", "group_filter_type", "id", "name", "status", "system", "value", "valueType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['OAuth2ClaimLinks', schemas.Unset] = schemas.unset,
        alwaysIncludeInToken: typing.Union[MetaOapg.properties.alwaysIncludeInToken, bool, schemas.Unset] = schemas.unset,
        claimType: typing.Union[MetaOapg.properties.claimType, str, schemas.Unset] = schemas.unset,
        conditions: typing.Union['OAuth2ClaimConditions', schemas.Unset] = schemas.unset,
        group_filter_type: typing.Union[MetaOapg.properties.group_filter_type, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        system: typing.Union[MetaOapg.properties.system, bool, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        valueType: typing.Union[MetaOapg.properties.valueType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OAuth2Claim':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            alwaysIncludeInToken=alwaysIncludeInToken,
            claimType=claimType,
            conditions=conditions,
            group_filter_type=group_filter_type,
            id=id,
            name=name,
            status=status,
            system=system,
            value=value,
            valueType=valueType,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.o_auth2_claim_conditions import OAuth2ClaimConditions
from okta_python_sdk.model.o_auth2_claim_links import OAuth2ClaimLinks
