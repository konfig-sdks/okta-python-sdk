# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class SchemeApplicationCredentials(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def password() -> typing.Type['PasswordCredential']:
                return PasswordCredential
            revealPassword = schemas.BoolSchema
        
            @staticmethod
            def scheme() -> typing.Type['ApplicationCredentialsScheme']:
                return ApplicationCredentialsScheme
        
            @staticmethod
            def signing() -> typing.Type['ApplicationCredentialsSigning']:
                return ApplicationCredentialsSigning
            userName = schemas.StrSchema
            __annotations__ = {
                "password": password,
                "revealPassword": revealPassword,
                "scheme": scheme,
                "signing": signing,
                "userName": userName,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> 'PasswordCredential': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revealPassword"]) -> MetaOapg.properties.revealPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheme"]) -> 'ApplicationCredentialsScheme': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signing"]) -> 'ApplicationCredentialsSigning': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["password", "revealPassword", "scheme", "signing", "userName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union['PasswordCredential', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revealPassword"]) -> typing.Union[MetaOapg.properties.revealPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheme"]) -> typing.Union['ApplicationCredentialsScheme', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signing"]) -> typing.Union['ApplicationCredentialsSigning', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["password", "revealPassword", "scheme", "signing", "userName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        password: typing.Union['PasswordCredential', schemas.Unset] = schemas.unset,
        revealPassword: typing.Union[MetaOapg.properties.revealPassword, bool, schemas.Unset] = schemas.unset,
        scheme: typing.Union['ApplicationCredentialsScheme', schemas.Unset] = schemas.unset,
        signing: typing.Union['ApplicationCredentialsSigning', schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemeApplicationCredentials':
        return super().__new__(
            cls,
            *args,
            password=password,
            revealPassword=revealPassword,
            scheme=scheme,
            signing=signing,
            userName=userName,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.application_credentials_scheme import ApplicationCredentialsScheme
from okta_python_sdk.model.application_credentials_signing import ApplicationCredentialsSigning
from okta_python_sdk.model.password_credential import PasswordCredential
