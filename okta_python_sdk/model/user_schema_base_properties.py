# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API

    The version of the OpenAPI document: 2.16.0
    Contact: devex-public@okta.com
    Created by: https://developer.okta.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from okta_python_sdk import schemas  # noqa: F401


class UserSchemaBaseProperties(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def title() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def city() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def costCenter() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def countryCode() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def department() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def displayName() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def division() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def email() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def employeeNumber() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def firstName() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def honorificPrefix() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def honorificSuffix() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def lastName() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def locale() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def login() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def manager() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def managerId() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def middleName() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def mobilePhone() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def nickName() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def organization() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def postalAddress() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def preferredLanguage() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def primaryPhone() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def profileUrl() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def secondEmail() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def state() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def streetAddress() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def timezone() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def userType() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
        
            @staticmethod
            def zipCode() -> typing.Type['UserSchemaAttribute']:
                return UserSchemaAttribute
            __annotations__ = {
                "title": title,
                "city": city,
                "costCenter": costCenter,
                "countryCode": countryCode,
                "department": department,
                "displayName": displayName,
                "division": division,
                "email": email,
                "employeeNumber": employeeNumber,
                "firstName": firstName,
                "honorificPrefix": honorificPrefix,
                "honorificSuffix": honorificSuffix,
                "lastName": lastName,
                "locale": locale,
                "login": login,
                "manager": manager,
                "managerId": managerId,
                "middleName": middleName,
                "mobilePhone": mobilePhone,
                "nickName": nickName,
                "organization": organization,
                "postalAddress": postalAddress,
                "preferredLanguage": preferredLanguage,
                "primaryPhone": primaryPhone,
                "profileUrl": profileUrl,
                "secondEmail": secondEmail,
                "state": state,
                "streetAddress": streetAddress,
                "timezone": timezone,
                "userType": userType,
                "zipCode": zipCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["division"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["honorificPrefix"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["honorificSuffix"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manager"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managerId"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilePhone"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickName"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalAddress"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredLanguage"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPhone"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileUrl"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondEmail"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddress"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userType"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> 'UserSchemaAttribute': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "city", "costCenter", "countryCode", "department", "displayName", "division", "email", "employeeNumber", "firstName", "honorificPrefix", "honorificSuffix", "lastName", "locale", "login", "manager", "managerId", "middleName", "mobilePhone", "nickName", "organization", "postalAddress", "preferredLanguage", "primaryPhone", "profileUrl", "secondEmail", "state", "streetAddress", "timezone", "userType", "zipCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["division"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["honorificPrefix"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["honorificSuffix"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manager"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managerId"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilePhone"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickName"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalAddress"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredLanguage"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPhone"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileUrl"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondEmail"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddress"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userType"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union['UserSchemaAttribute', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "city", "costCenter", "countryCode", "department", "displayName", "division", "email", "employeeNumber", "firstName", "honorificPrefix", "honorificSuffix", "lastName", "locale", "login", "manager", "managerId", "middleName", "mobilePhone", "nickName", "organization", "postalAddress", "preferredLanguage", "primaryPhone", "profileUrl", "secondEmail", "state", "streetAddress", "timezone", "userType", "zipCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        city: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        costCenter: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        countryCode: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        department: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        displayName: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        division: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        email: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        firstName: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        honorificPrefix: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        honorificSuffix: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        lastName: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        locale: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        login: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        manager: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        managerId: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        middleName: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        mobilePhone: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        nickName: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        organization: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        postalAddress: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        preferredLanguage: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        primaryPhone: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        profileUrl: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        secondEmail: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        state: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        streetAddress: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        timezone: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        userType: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        zipCode: typing.Union['UserSchemaAttribute', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserSchemaBaseProperties':
        return super().__new__(
            cls,
            *args,
            title=title,
            city=city,
            costCenter=costCenter,
            countryCode=countryCode,
            department=department,
            displayName=displayName,
            division=division,
            email=email,
            employeeNumber=employeeNumber,
            firstName=firstName,
            honorificPrefix=honorificPrefix,
            honorificSuffix=honorificSuffix,
            lastName=lastName,
            locale=locale,
            login=login,
            manager=manager,
            managerId=managerId,
            middleName=middleName,
            mobilePhone=mobilePhone,
            nickName=nickName,
            organization=organization,
            postalAddress=postalAddress,
            preferredLanguage=preferredLanguage,
            primaryPhone=primaryPhone,
            profileUrl=profileUrl,
            secondEmail=secondEmail,
            state=state,
            streetAddress=streetAddress,
            timezone=timezone,
            userType=userType,
            zipCode=zipCode,
            _configuration=_configuration,
            **kwargs,
        )

from okta_python_sdk.model.user_schema_attribute import UserSchemaAttribute
